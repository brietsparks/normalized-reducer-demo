{"version":3,"sources":["theme.ts","components/state-viewer/StateViewer.tsx","components/layout/styles.ts","components/layout/Layout.tsx","components/card/styles.ts","components/card/Card.tsx","components/info/styles.ts","components/info/ActionInfo.tsx","util/index.ts","demo-actions/create/styles.ts","demo-actions/create/hooks.ts","demo-actions/create/Basic.tsx","demo-actions/create/WithIndex.tsx","demo-actions/create/index.ts","demo-actions/attach-detach/styles.ts","demo-actions/attach-detach/Card.tsx","demo-actions/attach-detach/ManyToMany.tsx","demo-actions/attach-detach/OneToOne.tsx","demo-actions/attach-detach/OneToMany.tsx","demo-actions/attach-detach/index.ts","demo-actions/update/Update.tsx","demo-actions/delete/Basic.tsx","demo-actions/delete/styles.ts","demo-actions/delete/Card.tsx","demo-actions/delete/WithAttachments.tsx","demo-actions/delete/index.ts","demo-actions/move/style.ts","demo-actions/move/Move.tsx","demo-actions/move-attached/styles.ts","demo-actions/move-attached/MoveAttached.tsx","demo-actions/sort/styles.ts","demo-actions/sort/Sort.tsx","demo-actions/sort-attached/styles.ts","demo-actions/sort-attached/SortAttached.tsx","demo-actions/batch-actions/styles.ts","demo-actions/batch-actions/BatchActions.tsx","demo-actions/set-state/styles.ts","demo-actions/set-state/SetState.tsx","example-features/sortable-tags/style.ts","example-features/sortable-tags/SortableTags.tsx","example-features/normalizr-integration/normalizr-schema.js","example-features/normalizr-integration/styles.ts","example-features/normalizr-integration/NormalizrIntegration.tsx","example-features/comment-tree/styles.ts","example-features/comment-tree/CommentTree.tsx","example-features/directory-tree/styles.ts","example-features/directory-tree/DirectoryTree.tsx","nav/routes.ts","nav/Router.tsx","nav/Links.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["createMuiTheme","overrides","MuiLink","root","cursor","MuiInputBase","input","background","multiline","props","MuiButtonBase","disableRipple","MuiDialog","transitionDuration","MuiPopover","PaperProps","square","MuiTooltip","enterDelay","arrow","MuiIconButton","size","MuiIcon","fontSize","MuiButton","disableElevation","variant","MuiTextField","margin","InputLabelProps","shrink","MuiFormControl","StateView","state","name","level","style","paddingTop","paddingLeft","minHeight","src","theme","collapsed","displayObjectSize","enableClipboard","displayDataTypes","useStyles","makeStyles","scrollable","height","overflowY","Layout","sidebar","Links","main","stateName","classNames","Grid","container","item","xs","sm","className","Container","StateViewer","left","display","justifyContent","cardWrapper","args","padding","spacing","deriveCursor","border","borderColor","deriveBorderColor","deriveHoveredBorderColor","cardBody","paddingRight","cardContainer","marginBottom","isSelected","blueGrey","isSelectable","Card","body","right","isLeftShown","isRightShown","onSelect","classes","onDeselect","Paper","onClick","Typography","CardsContainer","children","React","Children","map","child","index","section","label","fontWeight","docsIcon","position","top","preformat","borderLeft","color","pageBreakInside","fontFamily","lineHeight","maxWidth","overflow","wordWrap","Label","Summary","title","summary","component","Code","Array","isArray","join","ExternalLink","elemId","text","url","Error","href","target","rel","ActionInfo","action","docElemId","example","Info","randomString","length","n","Math","floor","pow","random","toString","form","formItemName","marginRight","formHint","marginTop","marginLeft","fontStyle","useEnterHandler","onEnter","ref","e","key","current","document","activeElement","normalizedSlice","reducer","emptyState","actionCreators","selectors","NewItemForm","onSubmit","useState","setName","cleanName","trim","useRef","handleSubmit","focus","inputProps","onKeyPress","TextField","autoFocus","placeholder","value","onChange","InputProps","endAdornment","InputAdornment","IconButton","disabled","initialState","entities","ids","setIndex","nameInputRef","indexInputRef","handleKeyPressName","handleKyPressIndex","nameInputProps","indexInputProps","Number","type","useReducer","dispatch","getIds","id","create","getEntity","useAttachDetachStyles","cardId","isAttachedToSelected","palette","secondary","undefined","cardAttached","cardAttachedIds","attached","selectedRelatedId","select","deselect","attach","detach","checkboxSide","Boolean","includes","checkboxProps","Checkbox","checked","CardBody","JSON","stringify","schema","tagIds","cardinality","Cardinalities","MANY","reciprocal","tag","itemIds","account","profileId","ONE","profile","accountId","email","listId","list","entitiesState","selectedItem","setSelectedItem","selectedTag","setSelectedTag","deselectItem","deselectTag","selectItem","selectTag","itemId","tagId","ClickAwayListener","onClickAway","selectedAccount","setSelectedAccount","selectedProfile","setSelectedProfile","deselectAccount","deselectProfile","selectAccount","selectProfile","selectedList","setSelectedList","deselectList","selectList","Example","update","del","delete","onClickDelete","deleteItem","deleteTag","card","AnimatedItem","posed","div","flip","transition","duration","move","listTitle","borderTop","MoveAttached","listIds","ItemViewer","moveUp","moveAttached","moveItemUp","moveDown","moveItemDown","buttons","Button","sort","a","b","sortAttached","sortListItemsAsc","sortListItemsDesc","listNumber","setListNumber","itemId1","itemId2","itemId3","batch","setState","sourceLink","chip","demo","makeNormalizedSlice","SortableList","SortableContainer","flexWrap","DragHandle","SortableHandle","SortableChip","SortableElement","Chip","axis","onSortStart","onSortEnd","indices","oldIndex","newIndex","useDragHandle","onDelete","user","Entity","mergeStrategy","entityA","entityB","posts","comments","processStrategy","parent","comment","commenter","post","author","heading","denormalizedData","content","NormalizrIntegration","normalizedData","normalize","normalizrSchema","fromNormalizr","isLast","commentSideline","commentContent","width","reply","replyCancel","parentId","childIds","store","actionTypes","createStore","Main","useSelector","filter","getRootCommentIds","useDispatch","CommentViewer","NewComment","cascade","isButtonsOpen","setIsButtonsOpen","closeButtons","isReplyOpen","setIsReplyOpen","closeReply","childId","reciprocalIndex","onCancel","showCancel","setValue","fullWidth","cleaned","nodeLine","nodeChildren","options","directory","parentDirectoryId","childDirectoryIds","fileIds","file","directoryId","TopLevelDirectoryNodes","topLevelIds","getTopLevelDirectoryIds","DirectoryNode","Form","isOpen","setIsOpen","isOptionsShown","setIsOptionsShown","isFileFormShown","setIsFileFormShown","isDirectoryFormShown","setIsDirectoryFormShown","hideFormAndOptions","fileId","FileNode","childDirectoryId","Router","basename","exact","path","routes","List","dense","ListItem","ListItemText","Divider","subheader","ListSubheader","to","button","App","CssBaseline","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c7471c17.chunk.js","sourcesContent":["import { createMuiTheme } from '@material-ui/core/styles';\nimport { blue, red } from '@material-ui/core/colors';\n\n// const borderRadius = 4;\n\n// @ts-ignore\nexport default createMuiTheme({\n  overrides: {\n    MuiLink: {\n      root: {\n        cursor: 'pointer',\n      },\n    },\n    MuiInputBase: {\n      input: { background: '#fff' },\n      multiline: { background: '#fff' }\n    }\n  },\n  props: {\n    MuiButtonBase: {\n      disableRipple: true // No ripple on the whole application\n    },\n    MuiDialog: {\n      transitionDuration: 0,\n    },\n    MuiPopover: {\n      PaperProps: { square: true },\n    },\n    MuiTooltip: {\n      enterDelay: 1200,\n      arrow: true,\n    },\n    MuiIconButton: {\n      size: 'small',\n    },\n    MuiIcon: {\n      fontSize: 'small'\n    },\n    MuiButton: {\n      disableElevation: true,\n      variant: 'contained',\n      disableRipple: true,\n    },\n    MuiTextField: {\n      variant: 'outlined',\n      margin: 'dense',\n      InputLabelProps: {\n        shrink: true,\n      },\n    },\n    MuiFormControl: {\n      variant: 'outlined',\n      margin: 'dense',\n    },\n  },\n});\n\n","import React from 'react';\nimport JsonView from 'react-json-view';\n\nexport interface Props{\n  state?: any,\n  name?: string,\n  level?: number,\n}\n\nfunction StateView({ state, name = 'state', level = 5 }: Props) {\n  return (\n    <JsonView\n      style={{ paddingTop: 15, paddingLeft: 15, minHeight: '100vh' }}\n      src={state}\n      name={name}\n      theme=\"monokai\"\n      collapsed={level}\n      displayObjectSize={false}\n      enableClipboard={false}\n      displayDataTypes={false}\n    />\n  )\n}\n\nexport default StateView;\n","import { makeStyles } from '@material-ui/core/styles';\n\nexport const useStyles = makeStyles(theme => ({\n  scrollable: {\n    height: '100vh',\n    overflowY: 'scroll',\n  }\n}));\n","import React, { ReactNode } from 'react';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport { StateViewer } from '../state-viewer';\nimport { Links } from '../../nav';\nimport { useStyles } from './styles';\n\nexport interface Props {\n  sidebar?: ReactNode|null,\n  main?: ReactNode|null,\n  state?: any,\n  stateName?: string,\n}\n\nexport default function Layout({\n  sidebar = <Links/>,\n  main = null,\n  state,\n  stateName\n}: Props) {\n  const classNames = useStyles();\n\n  return (\n    <Grid container>\n      <Grid item xs={12} sm={2}>\n        <div className={classNames.scrollable}>\n          {sidebar}\n        </div>\n      </Grid>\n\n      <Grid item xs={12} sm={6}>\n        <Container className={classNames.scrollable}>\n          {main}\n        </Container>\n      </Grid>\n\n      <Grid item xs={12} sm={4}>\n        <div className={classNames.scrollable}>\n          <StateViewer state={state} name={stateName} />\n        </div>\n      </Grid>\n    </Grid>\n  );\n}\n","import { makeStyles } from '@material-ui/core/styles';\nimport { blueGrey } from '@material-ui/core/colors';\n\nexport interface Args {\n  isSelectable?: boolean,\n  isSelected?: boolean,\n}\n\nexport const useStyles = makeStyles(theme => ({\n  left: {\n    display: 'flex',\n    justifyContent: 'flex-end',\n  },\n  cardWrapper: (args: Args) => ({\n    padding: theme.spacing(1),\n    cursor: deriveCursor(args),\n    border: `solid`,\n    borderColor: deriveBorderColor(args),\n    '&:hover': {\n      borderColor: deriveHoveredBorderColor(args),\n    }\n  }),\n  cardBody: {\n    paddingLeft: theme.spacing(1),\n    paddingRight: theme.spacing(1),\n  },\n  cardContainer: { marginBottom: theme.spacing(2) }\n}));\n\nconst deriveBorderColor = (args: Args) => {\n  let borderColor;\n  if (!args.isSelected) {\n    borderColor = '#fff';\n  }\n\n  if (args.isSelected) {\n    borderColor = blueGrey['500'];\n  }\n  return borderColor;\n};\n\nconst deriveHoveredBorderColor = (args: Args) => {\n  if (!args.isSelectable) {\n    return '#fff';\n  }\n\n  if (args.isSelected) {\n    return blueGrey['500'];\n  }\n\n  return blueGrey['100'];\n};\n\nconst deriveCursor = (args: Args) => {\n  if (!args.isSelectable) {\n    return 'inherit';\n  }\n\n  if (!args.isSelected) {\n    return 'pointer';\n  }\n};\n","import React, { ReactNode, MouseEvent } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\n\nimport { useStyles } from './styles';\n\nexport interface Props {\n  body: ReactNode|string,\n  left?: ReactNode,\n  right?: ReactNode,\n  isLeftShown?: boolean,\n  isRightShown?: boolean,\n  isSelectable?: boolean,\n  isSelected?: boolean,\n  onSelect?: () => void,\n  onDeselect?: () => void,\n}\n\nexport default function Card({\n  body,\n  left,\n  right,\n  isLeftShown = true,\n  isRightShown = true,\n  isSelectable,\n  isSelected,\n  onSelect,\n  onDeselect,\n}: Props) {\n  const classes = useStyles({ isSelectable, isSelected });\n\n  const handleClick = () => {\n    if (isSelectable && !isSelected && onSelect) {\n      onSelect();\n    }\n  };\n\n  return (\n    <Grid container>\n      {left && (\n        <Grid item xs={2} className={classes.left}>\n          <div>{isLeftShown && left}</div>\n        </Grid>\n      )}\n\n      <Grid\n        item\n        xs={left || right ? (left && right ? 8 : 10) : 12}\n        className={classes.cardBody}\n      >\n        <Paper className={classes.cardWrapper} onClick={handleClick}>\n          {typeof body === 'string' ? <Typography>{body}</Typography> : body}\n        </Paper>\n      </Grid>\n\n      {right && (\n        <Grid item xs={2}><div>{isRightShown && right}</div></Grid>\n      )}\n    </Grid>\n  );\n}\n\nexport interface CardContainerProps {\n  children: ReactNode\n}\n\nexport function CardsContainer({ children }: CardContainerProps) {\n  const classes = useStyles();\n\n  return (\n    <div>\n      {React.Children.map(children, (child, index) => {\n        return (\n          <div className={classes.cardContainer}>{child}</div>\n        )\n      })}\n    </div>\n  );\n}\n","import { makeStyles } from '@material-ui/core/styles';\n\nexport const useStyles = makeStyles(theme => ({\n  section: {\n    marginBottom: theme.spacing(2)\n  },\n  label: {\n    fontWeight: 'bold'\n  },\n  docsIcon: {\n    position: 'relative',\n    top: 2,\n    height: '.7em'\n  },\n  preformat: {\n    margin: 0,\n    background: '#f4f4f4',\n    border: '1px solid #ddd',\n    borderLeft: '3px solid #f36d33',\n    color: '#666',\n    pageBreakInside: 'avoid',\n    fontFamily: 'monospace',\n    fontSize: 15,\n    lineHeight: 1.6,\n    maxWidth: '100%',\n    overflow: 'auto',\n    padding: '1em 1.5em',\n    display: 'block',\n    wordWrap: 'break-word',\n  }\n}));\n","import React from 'react';\nimport Typography, { TypographyProps } from '@material-ui/core/Typography';\nimport OpenInNewIcon from '@material-ui/icons/OpenInNew';\n\nimport { useStyles } from './styles';\n\nexport interface Props {\n  title: string,\n  summary: string,\n  action: string,\n  docElemId: string,\n  example: string|string[],\n}\n\nconst urlBase = 'https://github.com/brietsparks/normalized-reducer';\n\nexport const Label = (props: TypographyProps) => {\n  const classNames = useStyles();\n  return <Typography className={classNames.label} {...props} />\n};\n\n\nexport interface SummaryProps {\n  title: string,\n  summary?: string,\n}\nexport function Summary({ title, summary = '', }: SummaryProps) {\n  const classNames = useStyles();\n  return (\n    <div>\n      <Typography variant=\"h5\" component=\"h2\">{title}</Typography>\n\n      <div className={classNames.section}>\n        <Typography>{summary}</Typography>\n      </div>\n    </div>\n  );\n}\n\nexport interface CodeProps {\n  children?: string|string[]\n}\nexport function Code({ children }: CodeProps) {\n  const classNames = useStyles();\n\n  return (\n    <pre className={classNames.preformat}>\n      <code>\n        {Array.isArray(children) ? children.join('\\n') : children}\n      </code>\n    </pre>\n  );\n}\n\nexport interface ExternalLinkProps {\n  elemId?: string,\n  text: string,\n  url?: string\n}\n\nexport function ExternalLink({ elemId, text, url, ...props }: ExternalLinkProps) {\n  const classNames = useStyles();\n\n  if (!elemId && !url) {\n    throw new Error(('ExternalLink expects either an elemId or url'))\n  }\n\n  const href = url ? url : `${urlBase}#${elemId}`;\n\n  return (\n    <a href={href} target=\"_blank\" rel=\"noopener noreferrer\" {...props}>\n      {text}<OpenInNewIcon className={classNames.docsIcon}/>\n    </a>\n  );\n}\n\nexport interface ActionInfoProps {\n  action: string,\n  docElemId: string,\n  example: string|string[],\n}\n\nexport function ActionInfo({\n  action,\n  docElemId,\n  example,\n}: ActionInfoProps) {\n  const classNames = useStyles();\n\n  return (\n    <div>\n      <div className={classNames.section}>\n        <Typography>\n          <span className={classNames.label}>Action: </span>\n          <ExternalLink elemId={docElemId} text={action} />\n        </Typography>\n      </div>\n\n      <div className={classNames.section}>\n        <Label>Example:</Label>\n        <Code>{example}</Code>\n      </div>\n    </div>\n  )\n}\n\nexport default function Info({\n  title,\n  summary,\n  action,\n  docElemId,\n  example\n}: Props) {\n  return (\n    <div>\n      <Summary title={title} summary={summary}/>\n      <ActionInfo action={action} docElemId={docElemId} example={example}/>\n    </div>\n  );\n}\n","export function randomString(length: number = 6): string {\n  const n = Math.floor(Math.pow(10, length-1) + Math.random() * (Math.pow(10, length) - Math.pow(10, length-1) - 1));\n  return n.toString();\n}\n","import { makeStyles } from '@material-ui/core/styles';\n\nexport const useStyles = makeStyles(theme => ({\n  form: {\n    display: 'flex',\n    marginBottom: theme.spacing(2),\n  },\n  formItemName: {\n    marginRight: theme.spacing(1)\n  },\n  formHint: {\n    marginTop: theme.spacing(2.25),\n    marginLeft: theme.spacing(1),\n    fontStyle: 'italic',\n    color: '#888'\n  }\n}));\n","import { KeyboardEvent, MutableRefObject } from 'react';\n\nexport function useEnterHandler(onEnter: () => void, ref: MutableRefObject<HTMLInputElement>) {\n  return (e: KeyboardEvent) => {\n    if (e.key === 'Enter' && ref?.current as HTMLElement === document.activeElement) {\n      onEnter();\n    }\n  };\n}\n","import React, { useReducer, useState, useRef, MutableRefObject } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport AddIcon from '@material-ui/icons/AddCircle';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport IconButton from '@material-ui/core/IconButton';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport normalizedSlice, { Schema, Id } from 'normalized-reducer';\n\nimport { Layout } from '../../components/layout';\nimport { Card, CardsContainer } from '../../components/card';\nimport { Info, Label } from '../../components/info';\nimport { randomString } from '../../util';\nimport { useStyles } from './styles';\nimport { useEnterHandler } from './hooks';\n\ninterface Item {\n  name: string\n}\n\nconst schema: Schema = {\n  'item': {\n    // the minimum entity schema is an empty object\n  }\n};\n\ninterface State {\n  entities: {\n    item: Record<Id, Item>\n  },\n  ids: {\n    item: Id[]\n  }\n}\n\nconst {\n  reducer,\n  emptyState,\n  actionCreators,\n  selectors\n} = normalizedSlice<State>(schema);\n\nexport default function Example() {\n  const [state, dispatch] = useReducer(reducer, emptyState);\n\n  const ids = selectors.getIds(state, { type: 'item' });\n\n  const createItem = (name: string) => {\n    const id = randomString();\n    dispatch(actionCreators.create('item', id, { name }));\n  };\n\n  const main = (\n    <Container>\n      <Info\n        title=\"Create\"\n        summary=\"Add an entity to state.\"\n        action=\"create\"\n        docElemId=\"create\"\n        example=\"actionCreators.create('item', id, { fieldA: 'arbitrary' , fieldB: 'anything' })\"\n      />\n\n      <Label>Demo:</Label>\n      <Typography>Add some items. Each entity will get added to the <code>state.entities.item</code> object, and its id will be appended on the <code>state.ids.item</code> array.</Typography>\n\n      <NewItemForm onSubmit={createItem} />\n\n      <CardsContainer>\n        {ids.map(id => {\n          const item = selectors.getEntity<Item>(state, { type: 'item', id });\n          return (\n            <Card key={id} body={item?.name} isSelectable={false}/>\n          )\n        })}\n      </CardsContainer>\n    </Container>\n  );\n\n  return (\n    <Layout\n      main={main}\n      state={state}\n    />\n  )\n}\n\ninterface NewItemFormProps {\n  onSubmit: (name: string) => void\n}\n\nfunction NewItemForm({ onSubmit }: NewItemFormProps) {\n  const [name, setName] = useState('');\n  const cleanName = name.trim();\n\n  const ref = useRef<HTMLInputElement>() as MutableRefObject<HTMLInputElement>;\n\n  const handleSubmit = () => {\n    if (!!cleanName) {\n      onSubmit(cleanName);\n      setName('');\n      ref.current.focus();\n    }\n  };\n\n  const handleKeyPress = useEnterHandler(handleSubmit, ref);\n\n  const inputProps = {\n    onKeyPress: handleKeyPress,\n    ref\n  };\n\n  const classNames = useStyles();\n\n  return (\n    <div className={classNames.form}>\n      <TextField\n        autoFocus\n        inputProps={inputProps}\n        placeholder=\"Item name:\"\n        value={name}\n        onChange={e => setName(e.target.value)}\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">\n              <IconButton onClick={handleSubmit} color=\"primary\" disabled={!cleanName}>\n                <AddIcon/>\n              </IconButton>\n            </InputAdornment>\n          )\n        }}\n      />\n\n      {!!cleanName &&\n      <Typography className={classNames.formHint} variant=\"caption\">press enter</Typography>\n      }\n    </div>\n  );\n}\n","import React, { useReducer, useState, useRef, MutableRefObject } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport AddIcon from '@material-ui/icons/AddCircle';\nimport IconButton from '@material-ui/core/IconButton';\nimport Container from '@material-ui/core/Container';\nimport normalizedSlice, { Schema, Id } from 'normalized-reducer';\n\n\nimport { Layout } from '../../components/layout';\nimport { Card, CardsContainer } from '../../components/card';\nimport { randomString } from '../../util';\nimport { useStyles } from './styles';\nimport { useEnterHandler } from './hooks';\nimport { Info, Label } from '../../components/info';\nimport Typography from '@material-ui/core/Typography';\n\ninterface Item {\n  name: string\n}\n\nconst schema: Schema = {\n  'item': {\n    // the minimum entity schema is an empty object\n  }\n};\n\ninterface State {\n  entities: {\n    item: Record<Id, Item>\n  },\n  ids: {\n    item: Id[]\n  }\n}\n\nconst {\n  reducer,\n  actionCreators,\n  selectors\n} = normalizedSlice<State>(schema);\n\nconst initialState = {\n  entities: {\n    item: {\n      'i1': { name: 'Lorem' },\n      'i2': { name: 'Ispum' },\n      'i3': { name: 'Dolor' },\n      'i4': { name: 'Sit Amet' }\n    }\n  },\n  ids: {\n    item: ['i1', 'i2', 'i3', 'i4']\n  }\n};\n\nexport default function Example() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const ids = selectors.getIds(state, { type: 'item' });\n\n  const createItem = (name: string, index: number) => {\n    const id = randomString();\n    dispatch(actionCreators.create('item', id, { name }, index));\n  };\n\n  const main = (\n    <Container>\n      <Info\n        title=\"Create, indexed\"\n        summary=\"Add an entity to a collection at a given index.\"\n        action=\"create\"\n        docElemId=\"create\"\n        example=\"actionCreators.create('item', id, { a: 'foo' }, 2)\"\n      />\n\n      <Label>Demo:</Label>\n      <Typography>Add some items. Each entity will get added to the <code>state.entities.item</code> object, and its id will be inserted at the appropriate index in the <code>state.ids.item</code> array.</Typography>\n\n      <NewItemForm onSubmit={createItem} />\n\n      <CardsContainer>\n        {ids.map(id => {\n          const item = selectors.getEntity<Item>(state, { type: 'item', id });\n          return (\n            <Card key={id} body={item?.name} isSelectable={false}/>\n          )\n        })}\n      </CardsContainer>\n    </Container>\n  );\n\n  return (\n    <Layout\n      main={main}\n      state={state}\n    />\n  )\n}\n\ninterface NewItemFormProps {\n  onSubmit: (name: string, index: number) => void\n}\n\nfunction NewItemForm({ onSubmit }: NewItemFormProps) {\n  const [index, setIndex] = useState(2);\n  const [name, setName] = useState('');\n  const cleanName = name.trim();\n\n  const classNames = useStyles();\n\n  const nameInputRef = useRef<HTMLInputElement>() as MutableRefObject<HTMLInputElement>;\n  const indexInputRef = useRef<HTMLInputElement>() as MutableRefObject<HTMLInputElement>;\n\n  const handleSubmit = () => {\n    if (!!cleanName) {\n      onSubmit(cleanName, index);\n      setName('');\n      nameInputRef.current.focus();\n    }\n  };\n\n  const handleKeyPressName = useEnterHandler(handleSubmit, nameInputRef);\n  const handleKyPressIndex = useEnterHandler(handleSubmit, indexInputRef);\n\n  const nameInputProps = {\n    onKeyPress: handleKeyPressName,\n    ref: nameInputRef\n  };\n\n  const indexInputProps = {\n    onKeyPress: handleKyPressIndex,\n    ref: indexInputRef\n  };\n\n  return (\n    <div className={classNames.form}>\n      <TextField\n        autoFocus\n        className={classNames.formItemName}\n        inputProps={nameInputProps}\n        placeholder=\"Item name:\"\n        value={name}\n        onChange={e => setName(e.target.value)}\n      />\n\n      <TextField\n        inputProps={indexInputProps}\n        placeholder=\"Index:\"\n        value={index}\n        onChange={e => e && setIndex(Number(e.target.value))}\n        type=\"number\"\n      />\n\n      <IconButton onClick={handleSubmit} color=\"primary\" disabled={!cleanName}>\n        <AddIcon/>\n      </IconButton>\n    </div>\n  );\n}\n","import Create from './Basic';\nimport WithIndex from './WithIndex';\n\nexport default {\n  Basic: Create,\n  WithIndex\n}\n","import { makeStyles } from '@material-ui/core/styles';\n\nexport const useAttachDetachStyles = makeStyles(theme => ({\n  cardId: (args: { isAttachedToSelected?: boolean }) => ({\n    color: args.isAttachedToSelected ? theme.palette.secondary.main : undefined\n  }),\n  cardAttached: (args: { isSelected?: boolean }) => ({\n    marginTop: theme.spacing(2),\n    color: args.isSelected ? theme.palette.secondary.main : undefined\n  }),\n  cardAttachedIds: (args: { isSelected?: boolean }) => ({\n    marginTop: 0,\n    color: args.isSelected ? theme.palette.secondary.main : undefined\n  })\n}));\n","import React from 'react';\nimport { Id } from 'normalized-reducer';\nimport { Card as CardPresentation } from '../../components/card';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Typography from '@material-ui/core/Typography';\n\nimport { useAttachDetachStyles } from './styles';\n\nexport interface Props {\n  id: Id,\n  text: string,\n  isSelected?: boolean,\n  attached?: Id[]|Id,\n  selectedRelatedId?: Id,\n  select: (id: Id) => void,\n  deselect: () => void\n  attach: (id: Id, attachableId: Id) => void,\n  detach: (id: Id, detachableId: Id) => void,\n  checkboxSide: 'left'|'right',\n}\n\nexport default function Card({\n  id,\n  text,\n  isSelected,\n  attached,\n  selectedRelatedId,\n  select,\n  deselect,\n  attach,\n  detach,\n  checkboxSide\n}: Props) {\n  let isAttachedToSelected: boolean = false;\n  if (selectedRelatedId) {\n    if (typeof attached === 'string') {\n      isAttachedToSelected = selectedRelatedId === attached;\n    }\n\n    if (Array.isArray(attached)) {\n      isAttachedToSelected = Boolean(selectedRelatedId && attached?.includes(selectedRelatedId))\n    }\n  }\n\n  const handleCheckboxChange = (e: any, value: boolean) => {\n    if (selectedRelatedId) {\n      value\n        ? attach(id, selectedRelatedId)\n        : detach(id, selectedRelatedId);\n    }\n  };\n\n  const checkboxProps = {\n    [checkboxSide]: (\n      <Checkbox\n        checked={isAttachedToSelected}\n        onChange={handleCheckboxChange}\n      />\n    ),\n    [checkboxSide === 'left' ? 'isLeftShown' : 'isRightShown']: !!selectedRelatedId\n  };\n\n\n  return (\n    <CardPresentation\n      key={id}\n      body={\n        <CardBody\n          id={id}\n          text={text}\n          ids={attached}\n          isSelected={isSelected}\n          isAttachedToSelected={isAttachedToSelected}\n        />\n      }\n      onSelect={() => select(id)}\n      onDeselect={deselect}\n      isSelectable\n      isSelected={isSelected}\n      {...checkboxProps}\n    />\n  )\n}\n\n\ninterface CardBodyProps {\n  id: Id,\n  text: string,\n  ids?: Id[]|Id,\n  isSelected?: boolean,\n  isAttachedToSelected?: boolean,\n}\nfunction CardBody({\n  id,\n  text,\n  ids,\n  isSelected,\n  isAttachedToSelected,\n}: CardBodyProps) {\n  const classes = useAttachDetachStyles({ isSelected, isAttachedToSelected });\n\n  return (\n    <div>\n      <Typography variant=\"caption\" className={classes.cardId}>{id}</Typography>\n      <Typography>{text}</Typography>\n\n      <div className={classes.cardAttached}>\n        <Typography variant=\"caption\">Attached Ids:</Typography>\n        <pre className={classes.cardAttachedIds}>{ids ? JSON.stringify(ids) : \" \"}</pre>\n      </div>\n    </div>\n  );\n}\n","import React, { useReducer, useState } from 'react';\nimport normalizedSlice, { Cardinalities, Id, Schema } from 'normalized-reducer';\nimport Grid from '@material-ui/core/Grid';\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\nimport Typography from '@material-ui/core/Typography';\n\nimport { Layout } from '../../components/layout';\nimport { CardsContainer } from '../../components/card';\nimport Card from './Card';\nimport { ActionInfo, Label, Summary } from '../../components/info';\n\nexport interface Item {\n  name: string,\n  tagIds: Id[]\n}\n\nexport interface Tag {\n  title: string,\n  itemIds: Id[]\n}\n\nexport interface EntitiesState {\n  entities: {\n    item: Record<Id, Item>,\n    tag: Record<Id, Tag>\n  },\n  ids: {\n    item: Id[],\n    tag: Id[],\n  }\n}\n\nconst schema: Schema = {\n  item: {\n    tagIds: {\n      type: 'tag',\n      cardinality: Cardinalities.MANY,\n      reciprocal: 'itemIds',\n    }\n  },\n  tag: {\n    itemIds: {\n      type: 'item',\n      cardinality: Cardinalities.MANY,\n      reciprocal: 'tagIds'\n    }\n  }\n};\n\nconst { selectors, reducer, actionCreators } = normalizedSlice<EntitiesState>(schema);\n\nconst initialState: EntitiesState = {\n  entities: {\n    item: {\n      'i1': { name: 'Item 1', tagIds: ['t2', 't3'] },\n      'i2': { name: 'Item 2', tagIds: [] },\n      'i3': { name: 'Item 3', tagIds: [] }\n    },\n    tag: {\n      't1': { title: 'Tag 1', itemIds: [] },\n      't2': { title: 'Tag 2', itemIds: ['i1'] },\n      't3': { title: 'Tag 3', itemIds: ['i1'] },\n    }\n  },\n  ids: {\n    item: ['i1', 'i2', 'i3'],\n    tag: ['t1', 't2', 't3']\n  }\n};\n\nexport default function Example() {\n  const [entitiesState, dispatch] = useReducer(reducer, initialState);\n  const [selectedItem, setSelectedItem] = useState<Id | undefined>(undefined);\n  const [selectedTag, setSelectedTag] = useState<Id | undefined>(undefined);\n\n  const deselectItem = () => setSelectedItem(undefined);\n  const deselectTag = () => setSelectedTag(undefined);\n\n  const selectItem = (id: Id) => {\n    setSelectedItem(id);\n    deselectTag();\n  };\n\n  const selectTag = (id: Id) => {\n    setSelectedTag(id);\n    deselectItem();\n  };\n\n  const itemIds = selectors.getIds(entitiesState, { type: 'item' });\n  const tagIds = selectors.getIds(entitiesState, { type: 'tag' });\n\n  const attach = (ids: { itemId: Id, tagId: Id }) => {\n    dispatch(actionCreators.attach('item', ids.itemId, 'tagIds', ids.tagId));\n  };\n\n  const detach = (ids: { itemId: Id, tagId: Id }) => {\n    dispatch(actionCreators.detach('item', ids.itemId, 'tagIds', ids.tagId));\n  };\n\n  const handleClickAway = () => {\n    deselectItem();\n    deselectTag();\n  };\n\n  const main = (\n    <div>\n      <Summary\n        title=\"Attach/detach many-to-many\"\n        summary=\"Attach and detach entities of a many-to-many relationship\"\n      />\n      <ActionInfo\n        action=\"attach\"\n        docElemId=\"attach\"\n        example=\"actionCreators.attach('item', 'i1', 'tagIds', 't1')\"\n      />\n      <ActionInfo\n        action=\"detach\"\n        docElemId=\"detach\"\n        example=\"actionCreators.detach('item', 'i1', 'tagIds', 't1')\"\n      />\n\n      <Label>Demo:</Label>\n      <Typography>Click on a box. Then click the checkboxes in the opposite column to attach/detach it. Attaching and detaching will change both entities in <code>state.entities</code>.</Typography>\n\n      <ClickAwayListener onClickAway={handleClickAway}>\n        <Grid container>\n          <Grid item sm={6}>\n            <CardsContainer>\n              {itemIds.map(itemId => {\n                const item = selectors.getEntity<Item>(entitiesState, { type: 'item', id: itemId });\n\n                if (!item) {\n                  return null;\n                }\n\n                return (\n                  <Card\n                    key={itemId}\n                    id={itemId}\n                    text={item.name}\n                    isSelected={itemId === selectedItem}\n                    attached={item.tagIds}\n                    selectedRelatedId={selectedTag}\n                    select={selectItem}\n                    deselect={deselectItem}\n                    attach={(itemId: Id, tagId: Id) => attach({ itemId, tagId })}\n                    detach={(itemId: Id, tagId: Id) => detach({ itemId, tagId })}\n                    checkboxSide=\"right\"\n                  />\n                )\n              })}\n            </CardsContainer>\n          </Grid>\n          <Grid item sm={6}>\n            <CardsContainer>\n              {tagIds.map(tagId => {\n                const tag = selectors.getEntity<Tag>(entitiesState, { type: 'tag', id: tagId });\n\n                if (!tag) {\n                  return null;\n                }\n\n                return (\n                  <Card\n                    key={tagId}\n                    id={tagId}\n                    text={tag.title}\n                    isSelected={tagId === selectedTag}\n                    attached={tag.itemIds}\n                    selectedRelatedId={selectedItem}\n                    select={selectTag}\n                    deselect={deselectTag}\n                    attach={(tagId: Id, itemId: Id) => attach({ tagId, itemId })}\n                    detach={(tagId: Id, itemId: Id) => detach({ tagId, itemId })}\n                    checkboxSide=\"left\"\n                  />\n                )\n              })}\n            </CardsContainer>\n          </Grid>\n        </Grid>\n      </ClickAwayListener>\n    </div>\n  );\n\n  return (\n    <Layout\n      main={main}\n      state={entitiesState}\n    />\n  )\n}\n","import React, { useReducer, useState } from 'react';\nimport normalizedSlice, { Cardinalities, Id, Schema } from 'normalized-reducer';\nimport Grid from '@material-ui/core/Grid';\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\n\nimport { Layout } from '../../components/layout';\nimport { CardsContainer } from '../../components/card';\nimport Card from './Card';\nimport { ActionInfo, Label, Summary } from '../../components/info';\nimport Typography from '@material-ui/core/Typography';\n\nexport interface Account {\n  email: string,\n  profileId?: Id\n}\n\nexport interface Profile {\n  name: string\n  accountId?: Id\n}\n\nexport interface EntitiesState {\n  entities: {\n    account: Record<Id, Account>,\n    profile: Record<Id, Profile>\n  },\n  ids: {\n    account: Id[],\n    profile: Id[],\n  }\n}\n\nconst schema: Schema = {\n  account: {\n    profileId: {\n      type: 'profile',\n      cardinality: Cardinalities.ONE,\n      reciprocal: 'accountId',\n    }\n  },\n  profile: {\n    accountId: {\n      type: 'account',\n      cardinality: Cardinalities.ONE,\n      reciprocal: 'profileId'\n    }\n  }\n};\n\nconst { selectors, reducer, actionCreators } = normalizedSlice<EntitiesState>(schema);\n\nconst initialState: EntitiesState = {\n  entities: {\n    account: {\n      'a1': { email: 'account1@example.com', profileId: 'u2' },\n      'a2': { email: 'account2@example.com', profileId: 'u3' },\n      'a3': { email: 'account3@example.com', profileId: undefined }\n    },\n    profile: {\n      'u1': { name: 'Profile 1', accountId: undefined },\n      'u2': { name: 'Profile 2', accountId: 'a1' },\n      'u3': { name: 'Profile 3', accountId: 'a2' },\n    }\n  },\n  ids: {\n    account: ['a1', 'a2', 'a3'],\n    profile: ['u1', 'u2', 'u3']\n  }\n};\n\nexport default function Example() {\n  const [entitiesState, dispatch] = useReducer(reducer, initialState);\n  const [selectedAccount, setSelectedAccount] = useState<Id | undefined>(undefined);\n  const [selectedProfile, setSelectedProfile] = useState<Id | undefined>(undefined);\n\n  const deselectAccount = () => setSelectedAccount(undefined);\n  const deselectProfile = () => setSelectedProfile(undefined);\n\n  const selectAccount = (id: Id) => {\n    setSelectedAccount(id);\n    deselectProfile();\n  };\n\n  const selectProfile = (id: Id) => {\n    setSelectedProfile(id);\n    deselectAccount();\n  };\n\n  const accountId = selectors.getIds(entitiesState, { type: 'account' });\n  const profileId = selectors.getIds(entitiesState, { type: 'profile' });\n\n  const attach = (ids: { accountId: Id, profileId: Id }) => {\n    dispatch(actionCreators.attach('account', ids.accountId, 'profileId', ids.profileId));\n  };\n\n  const detach = (ids: { accountId: Id, profileId: Id }) => {\n    dispatch(actionCreators.detach('account', ids.accountId, 'profileId', ids.profileId));\n  };\n\n  const handleClickAway = () => {\n    deselectAccount();\n    deselectProfile();\n  };\n\n  const main = (\n    <div>\n      <Summary\n        title=\"Attach/detach one-to-one\"\n        summary=\"Attach and detach entities of a one-to-many relationship\"\n      />\n      <ActionInfo\n        action=\"attach\"\n        docElemId=\"attach\"\n        example=\"actionCreators.attach('account', 'a1', 'profileId', 'p1')\"\n      />\n      <ActionInfo\n        action=\"detach\"\n        docElemId=\"detach\"\n        example=\"actionCreators.detach('account', 'a1', 'profileId', 'p1')\"\n      />\n\n      <Label>Demo:</Label>\n      <Typography>Click on a box. Then click the checkboxes in the opposite column to attach/detach it. Attaching and detaching will change both entities in <code>state.entities</code>. Notice that at any given time, a profile can only have one account and vice versa.</Typography>\n\n      <ClickAwayListener onClickAway={handleClickAway}>\n        <Grid container>\n          <Grid item sm={6}>\n            <CardsContainer>\n              {accountId.map(accountId => {\n                const account = selectors.getEntity<Account>(entitiesState, { type: 'account', id: accountId });\n\n                if (!account) {\n                  return null;\n                }\n\n                return (\n                  <Card\n                    key={accountId}\n                    id={accountId}\n                    text={account.email}\n                    isSelected={accountId === selectedAccount}\n                    attached={account.profileId}\n                    selectedRelatedId={selectedProfile}\n                    select={selectAccount}\n                    deselect={deselectAccount}\n                    attach={(accountId: Id, profileId: Id) => attach({ accountId, profileId })}\n                    detach={(accountId: Id, profileId: Id) => detach({ accountId, profileId })}\n                    checkboxSide=\"right\"\n                  />\n                )\n              })}\n            </CardsContainer>\n          </Grid>\n          <Grid item sm={6}>\n            <CardsContainer>\n              {profileId.map(profileId => {\n                const profile = selectors.getEntity<Profile>(entitiesState, { type: 'profile', id: profileId });\n\n                if (!profile) {\n                  return null;\n                }\n\n                return (\n                  <Card\n                    key={profileId}\n                    id={profileId}\n                    text={profile.name}\n                    isSelected={profileId === selectedProfile}\n                    attached={profile.accountId}\n                    selectedRelatedId={selectedAccount}\n                    select={selectProfile}\n                    deselect={deselectProfile}\n                    attach={(profileId: Id, accountId: Id) => attach({ profileId, accountId })}\n                    detach={(profileId: Id, accountId: Id) => detach({ profileId, accountId })}\n                    checkboxSide=\"left\"\n                  />\n                )\n              })}\n            </CardsContainer>\n          </Grid>\n        </Grid>\n      </ClickAwayListener>\n    </div>\n  );\n\n  return (\n    <Layout\n      main={main}\n      state={entitiesState}\n    />\n  )\n}\n","import React, { useReducer, useState } from 'react';\nimport normalizedSlice, { Cardinalities, Id, Schema } from 'normalized-reducer';\nimport Grid from '@material-ui/core/Grid';\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\n\nimport { Layout } from '../../components/layout';\nimport { CardsContainer } from '../../components/card';\nimport Card from './Card';\nimport { ActionInfo, Label, Summary } from '../../components/info';\nimport Typography from '@material-ui/core/Typography';\n\nexport interface Item {\n  name: string,\n  listId: Id\n}\n\nexport interface List {\n  title: string,\n  itemIds: Id[]\n}\n\nexport interface EntitiesState {\n  entities: {\n    item: Record<Id, Item>,\n    list: Record<Id, List>\n  },\n  ids: {\n    item: Id[],\n    list: Id[],\n  }\n}\n\nconst schema: Schema = {\n  item: {\n    listId: {\n      type: 'list',\n      cardinality: Cardinalities.ONE,\n      reciprocal: 'itemIds',\n    }\n  },\n  list: {\n    itemIds: {\n      type: 'item',\n      cardinality: Cardinalities.MANY,\n      reciprocal: 'listId'\n    }\n  }\n};\n\nconst { selectors, reducer, actionCreators } = normalizedSlice<EntitiesState>(schema);\n\nconst initialState: EntitiesState = {\n  entities: {\n    item: {\n      'i1': { name: 'Item 1', listId: 'l1' },\n      'i2': { name: 'Item 2', listId: 'l1' },\n      'i3': { name: 'Item 3', listId: 'l3' }\n    },\n    list: {\n      'l1': { title: 'List 1', itemIds: ['i1', 'i2'] },\n      'l2': { title: 'List 2', itemIds: [] },\n      'l3': { title: 'List 3', itemIds: ['i3'] },\n    }\n  },\n  ids: {\n    item: ['i1', 'i2', 'i3'],\n    list: ['l1', 'l2', 'l3']\n  }\n};\n\nexport default function Example() {\n  const [entitiesState, dispatch] = useReducer(reducer, initialState);\n  const [selectedItem, setSelectedItem] = useState<Id | undefined>(undefined);\n  const [selectedList, setSelectedList] = useState<Id | undefined>(undefined);\n\n  const deselectItem = () => setSelectedItem(undefined);\n  const deselectList = () => setSelectedList(undefined);\n\n  const selectItem = (id: Id) => {\n    setSelectedItem(id);\n    deselectList();\n  };\n\n  const selectList = (id: Id) => {\n    setSelectedList(id);\n    deselectItem();\n  };\n\n  const itemIds = selectors.getIds(entitiesState, { type: 'item' });\n  const listId = selectors.getIds(entitiesState, { type: 'list' });\n\n  const attach = (ids: { itemId: Id, listId: Id }) => {\n    dispatch(actionCreators.attach('item', ids.itemId, 'listId', ids.listId));\n  };\n\n  const detach = (ids: { itemId: Id, listId: Id }) => {\n    dispatch(actionCreators.detach('item', ids.itemId, 'listId', ids.listId));\n  };\n\n  const handleClickAway = () => {\n    deselectItem();\n    deselectList();\n  };\n\n  const main = (\n    <div>\n      <Summary\n        title=\"Attach/detach one-to-many\"\n        summary=\"Attach and detach entities of a one-to-many relationship\"\n      />\n      <ActionInfo\n        action=\"attach\"\n        docElemId=\"attach\"\n        example=\"actionCreators.attach('list', 'l1', 'itemIds', 'i1')\"\n      />\n      <ActionInfo\n        action=\"detach\"\n        docElemId=\"detach\"\n        example=\"actionCreators.detach('list', 'l1', 'itemIds', 'i1')\"\n      />\n\n      <Label>Demo:</Label>\n      <Typography>Click on a box. Then click the checkboxes in the opposite column to attach/detach it. Attaching and detaching will change both entities in <code>state.entities</code>. Notice that an item can only have one list at any given time.</Typography>\n\n      <ClickAwayListener onClickAway={handleClickAway}>\n        <Grid container>\n          <Grid item sm={6}>\n            <CardsContainer>\n              {listId.map(listId => {\n                const list = selectors.getEntity<List>(entitiesState, { type: 'list', id: listId });\n\n                if (!list) {\n                  return null;\n                }\n\n                return (\n                  <Card\n                    key={listId}\n                    id={listId}\n                    text={list.title}\n                    isSelected={listId === selectedList}\n                    attached={list.itemIds}\n                    selectedRelatedId={selectedItem}\n                    select={selectList}\n                    deselect={deselectList}\n                    attach={(listId: Id, itemId: Id) => attach({ listId, itemId })}\n                    detach={(listId: Id, itemId: Id) => detach({ listId, itemId })}\n                    checkboxSide=\"right\"\n                  />\n                )\n              })}\n            </CardsContainer>\n          </Grid>\n          <Grid item sm={6}>\n            <CardsContainer>\n              {itemIds.map(itemId => {\n                const item = selectors.getEntity<Item>(entitiesState, { type: 'item', id: itemId });\n\n                if (!item) {\n                  return null;\n                }\n\n                return (\n                  <Card\n                    key={itemId}\n                    id={itemId}\n                    text={item.name}\n                    isSelected={itemId === selectedItem}\n                    attached={item.listId}\n                    selectedRelatedId={selectedList}\n                    select={selectItem}\n                    deselect={deselectItem}\n                    attach={(itemId: Id, listId: Id) => attach({ itemId, listId })}\n                    detach={(itemId: Id, listId: Id) => detach({ itemId, listId })}\n                    checkboxSide=\"left\"\n                  />\n                )\n              })}\n            </CardsContainer>\n          </Grid>\n        </Grid>\n      </ClickAwayListener>\n    </div>\n  );\n\n  return (\n    <Layout\n      main={main}\n      state={entitiesState}\n    />\n  )\n}\n","import ManyToMany from './ManyToMany';\nimport OneToOne from './OneToOne';\nimport OneToMany from './OneToMany';\n\nexport default {\n  ManyToMany,\n  OneToOne,\n  OneToMany,\n}\n","import React, { ChangeEvent, useReducer } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Container from '@material-ui/core/Container';\nimport normalizedSlice, { Schema, Id } from 'normalized-reducer';\n\nimport { Layout } from '../../components/layout';\nimport { Card, CardsContainer } from '../../components/card';\nimport { Info, Label } from '../../components/info';\nimport Typography from '@material-ui/core/Typography';\n\ninterface Item {\n  name: string\n}\n\nconst schema: Schema = {\n  'item': {\n    // the minimum entity schema is an empty object\n  }\n};\n\ninterface State {\n  entities: {\n    item: Record<Id, Item>\n  },\n  ids: {\n    item: Id[]\n  }\n}\n\nconst {\n  reducer,\n  emptyState,\n  actionCreators,\n  selectors\n} = normalizedSlice<State>(schema);\n\nconst initialState = {\n  entities: {\n    item: {\n      'i1': { name: 'Foo' },\n      'i2': { name: 'Bar' },\n      'i3': { name: 'Baz' }\n    }\n  },\n  ids: {\n    item: ['i1', 'i2', 'i3']\n  }\n};\n\nexport default function Example() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const ids = selectors.getIds(state, { type: 'item' });\n\n  const main = (\n    <Container>\n      <Info\n        title=\"Update\"\n        summary=\"Update an existing entity.\"\n        action=\"update\"\n        docElemId=\"update\"\n        example=\"actionCreators.update('item', 'i1', { name: 'x' })\"\n      />\n\n      <Label>Demo:</Label>\n      <Typography>Edit some items. Each entity will get updated in the <code>state.entities.item</code> object.</Typography>\n\n      <CardsContainer>\n        {ids.map(id => {\n          const item = selectors.getEntity<Item>(state, { type: 'item', id });\n\n          const update = (e: ChangeEvent<HTMLInputElement>) => {\n            dispatch(actionCreators.update('item', id, { name: e.target.value }));\n          };\n\n          return (\n            <Card\n              key={id}\n              isSelectable={false}\n              body={\n                <TextField\n                  value={item?.name}\n                  onChange={update}\n                  placeholder=\"Item name:\"\n                />\n              }\n            />\n          )\n        })}\n      </CardsContainer>\n    </Container>\n  );\n\n  return (\n    <Layout\n      main={main}\n      state={state}\n    />\n  )\n}\n","import React, { useReducer } from 'react';\nimport DeleteIcon from '@material-ui/icons/DeleteForever';\nimport IconButton from '@material-ui/core/IconButton';\nimport Container from '@material-ui/core/Container';\nimport normalizedSlice, { Schema, Id } from 'normalized-reducer';\n\nimport { Layout } from '../../components/layout';\nimport { Card, CardsContainer } from '../../components/card';\nimport { Info, Label } from '../../components/info';\nimport Typography from '@material-ui/core/Typography';\n\ninterface Item {\n  name: string\n}\n\nconst schema: Schema = {\n  'item': {\n    // the minimum entity schema is an empty object\n  }\n};\n\ninterface State {\n  entities: {\n    item: Record<Id, Item>\n  },\n  ids: {\n    item: Id[]\n  }\n}\n\nconst {\n  reducer,\n  actionCreators,\n  selectors\n} = normalizedSlice<State>(schema);\n\nconst initialState = {\n  entities: {\n    item: {\n      'i1': { name: 'Foo' },\n      'i2': { name: 'Bar' },\n      'i3': { name: 'Baz' }\n    }\n  },\n  ids: {\n    item: ['i1', 'i2', 'i3']\n  }\n};\n\nexport default function Example() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const ids = selectors.getIds(state, { type: 'item' });\n\n  const main = (\n    <Container>\n      <Info\n        title=\"Delete\"\n        summary=\"Delete an entity\"\n        action=\"delete\"\n        docElemId=\"delete\"\n        example=\"actionCreators.delete('item', 'i1')\"\n      />\n\n      <Label>Demo:</Label>\n      <Typography>Delete some items. The item will be removed from the <code>state.entities.item</code> object, and its id will be removed from the <code>state.ids.item</code> array.</Typography>\n\n      <CardsContainer>\n        {ids.map(id => {\n          const item = selectors.getEntity<Item>(state, { type: 'item', id });\n\n          const del = () => dispatch(actionCreators.delete('item', id));\n\n          return (\n            <Card\n              key={id}\n              isSelectable={false}\n              body={item?.name}\n              right={\n                <IconButton onClick={del}>\n                  <DeleteIcon/>\n                </IconButton>\n              }\n              isRightShown={true}\n            />\n          )\n        })}\n      </CardsContainer>\n    </Container>\n  );\n\n  return (\n    <Layout\n      main={main}\n      state={state}\n    />\n  )\n}\n","import { makeStyles } from '@material-ui/core/styles';\n\nexport const useStyles = makeStyles(theme => ({\n  cardBody: {\n    display: 'flex',\n    justifyContent: 'space-between'\n  },\n  cardAttached: {\n    marginTop: theme.spacing(2),\n  },\n  cardAttachedIds: {\n    marginTop: 0,\n  }\n}));\n","import React from 'react';\nimport { Id } from 'normalized-reducer';\nimport { Card as CardPresentation } from '../../components/card';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/DeleteForever';\n\n\nimport { useStyles } from './styles';\n\nexport interface Props {\n  id: Id,\n  text?: string,\n  attached?: Id[] | Id,\n  delete: (id: Id) => void,\n}\n\nexport default function Card({\n  id,\n  text,\n  attached,\n  delete: del,\n}: Props) {\n  const handleClickDelete = () => del(id);\n\n  return (\n    <CardPresentation\n      key={id}\n      isSelectable={false}\n      body={\n        <CardBody\n          id={id}\n          text={text}\n          ids={attached}\n          onClickDelete={handleClickDelete}\n        />\n      }\n    />\n  )\n}\n\n\ninterface CardBodyProps {\n  id: Id,\n  text?: string,\n  ids?: Id[] | Id,\n  onClickDelete: () => void;\n}\n\nfunction CardBody({\n  id,\n  text,\n  ids,\n  onClickDelete,\n}: CardBodyProps) {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.cardBody}>\n      <div>\n        <Typography variant=\"caption\">{id}</Typography>\n        <Typography>{text}</Typography>\n\n        <div className={classes.cardAttached}>\n          <Typography variant=\"caption\">Attached Ids:</Typography>\n          <pre className={classes.cardAttachedIds}>{ids ? JSON.stringify(ids) : \" \"}</pre>\n        </div>\n      </div>\n\n      <div>\n        <IconButton onClick={onClickDelete}>\n          <DeleteIcon/>\n        </IconButton>\n      </div>\n    </div>\n  );\n}\n","import React, { useReducer } from 'react';\nimport normalizedSlice, { Cardinalities, Id, Schema } from 'normalized-reducer';\nimport Grid from '@material-ui/core/Grid';\n\nimport { Layout } from '../../components/layout';\nimport { CardsContainer } from '../../components/card';\nimport Card from './Card';\nimport { Info, Label } from '../../components/info';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\n\nexport interface Item {\n  name: string,\n  tagIds: Id[]\n}\n\nexport interface Tag {\n  title: string,\n  itemIds: Id[]\n}\n\nexport interface EntitiesState {\n  entities: {\n    item: Record<Id, Item>,\n    tag: Record<Id, Tag>\n  },\n  ids: {\n    item: Id[],\n    tag: Id[],\n  }\n}\n\nconst schema: Schema = {\n  item: {\n    tagIds: {\n      type: 'tag',\n      cardinality: Cardinalities.MANY,\n      reciprocal: 'itemIds',\n    }\n  },\n  tag: {\n    itemIds: {\n      type: 'item',\n      cardinality: Cardinalities.MANY,\n      reciprocal: 'tagIds'\n    }\n  }\n};\n\nconst { selectors, reducer, actionCreators } = normalizedSlice<EntitiesState>(schema);\n\nconst initialState: EntitiesState = {\n  entities: {\n    item: {\n      'i1': { name: 'Item 1', tagIds: ['t2', 't3'] },\n      'i2': { name: 'Item 2', tagIds: ['t1', 't2', 't3'] },\n      'i3': { name: 'Item 3', tagIds: [] }\n    },\n    tag: {\n      't1': { title: 'Tag 1', itemIds: ['i2'] },\n      't2': { title: 'Tag 2', itemIds: ['i1', 'i2'] },\n      't3': { title: 'Tag 3', itemIds: ['i1', 'i2'] },\n    }\n  },\n  ids: {\n    item: ['i1', 'i2', 'i3'],\n    tag: ['t1', 't2', 't3']\n  }\n};\n\nexport default function Example() {\n  const [entitiesState, dispatch] = useReducer(reducer, initialState);\n\n  const itemIds = selectors.getIds(entitiesState, { type: 'item' });\n  const tagIds = selectors.getIds(entitiesState, { type: 'tag' });\n\n  const deleteItem = (id: Id) => dispatch(actionCreators.delete('item', id));\n  const deleteTag = (id: Id) => dispatch(actionCreators.delete('tag', id));\n\n  const main = (\n    <div>\n      <Info\n        title=\"Delete + detach\"\n        summary=\"Delete an entity and automatically detach all entities from it\"\n        action=\"delete\"\n        docElemId=\"delete\"\n        example=\"actionCreators.delete('item', 'i1')\"\n      />\n\n      <Label>Demo:</Label>\n      <Typography>Delete some items and tags. Deleting one will cause its id to be removed from the entity it was attached to.</Typography>\n\n      <Grid container>\n        <Grid item sm={6}>\n          <CardsContainer>\n            {itemIds.map(itemId => {\n              const item = selectors.getEntity<Item>(entitiesState, { type: 'item', id: itemId });\n\n              return (\n                <Card\n                  key={itemId}\n                  id={itemId}\n                  text={item?.name}\n                  attached={item?.tagIds}\n                  delete={deleteItem}\n                />\n              )\n            })}\n          </CardsContainer>\n        </Grid>\n        <Grid item sm={6}>\n          <CardsContainer>\n            {tagIds.map(tagId => {\n              const tag = selectors.getEntity<Tag>(entitiesState, { type: 'tag', id: tagId });\n\n              return (\n                <Card\n                  key={tagId}\n                  id={tagId}\n                  text={tag?.title}\n                  attached={tag?.itemIds}\n                  delete={deleteTag}\n                />\n              )\n            })}\n          </CardsContainer>\n        </Grid>\n      </Grid>\n    </div>\n  );\n\n  return (\n    <Layout\n      main={main}\n      state={entitiesState}\n    />\n  )\n}\n","import Basic from './Basic';\nimport WithAttachments from './WithAttachments';\n\nexport default {\n  Basic,\n  WithAttachments\n}\n","import { makeStyles } from '@material-ui/core/styles';\n\nexport const useStyles = makeStyles((theme) => ({\n  card: {\n    marginBottom: theme.spacing(2)\n  },\n  body: {\n    display: 'flex',\n    justifyContent: 'space-between'\n  }\n}));\n","import React, { useReducer } from 'react';\nimport UpIcon from '@material-ui/icons/ArrowUpward';\nimport DownIcon from '@material-ui/icons/ArrowDownward';\nimport IconButton from '@material-ui/core/IconButton';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport posed, { PoseGroup } from 'react-pose';\nimport normalizedSlice, { Id, Schema } from 'normalized-reducer';\n\nimport { Layout } from '../../components/layout';\nimport { Card } from '../../components/card';\nimport { useStyles } from './style';\nimport { Info, Label } from '../../components/info';\n\ninterface Item {\n  name: string\n}\n\nconst schema: Schema = {\n  'item': {\n    // the minimum entity schema is an empty object\n  }\n};\n\ninterface State {\n  entities: {\n    item: Record<Id, Item>\n  },\n  ids: {\n    item: Id[]\n  }\n}\n\nconst {\n  reducer,\n  actionCreators,\n  selectors\n} = normalizedSlice<State>(schema);\n\nconst initialState = {\n  ids: {\n    item: ['i1', 'i2', 'i3']\n  },\n  entities: {\n    item: {\n      'i1': { name: 'Foo' },\n      'i2': { name: 'Bar' },\n      'i3': { name: 'Baz' }\n    }\n  }\n};\n\nconst AnimatedItem = posed.div({\n  flip: {\n    transition: {\n      duration: 525,\n    },\n  },\n});\n\nexport default function Example() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const ids = selectors.getIds(state, { type: 'item' });\n\n  const classNames = useStyles();\n\n  const main = (\n    <Container>\n      <Info\n        title=\"Move\"\n        summary=\"Change the ordinal position of an entity with respect to its top-level collection\"\n        action=\"move\"\n        docElemId=\"move\"\n        example=\"actionCreators.move('item', 1, 3)\"\n      />\n\n      <Label>Demo:</Label>\n      <Typography>Move some items around. The item's id will be moved to the new index in the <code>state.ids.item</code> array.</Typography>\n\n      <PoseGroup>\n        {ids.map((id, index) => {\n          const item = selectors.getEntity<Item>(state, { type: 'item', id });\n\n          const moveUp = () => dispatch(actionCreators.move('item', index, index - 1));\n          const moveDown = () => dispatch(actionCreators.move('item', index, index + 1));\n\n          return (\n            <AnimatedItem key={id} index={index}>\n              <div className={classNames.card}>\n                <Card\n                  isSelectable={false}\n                  body={\n                    <div className={classNames.body}>\n                      <Typography>{item?.name}</Typography>\n                      <div>\n                        <div>\n                          <IconButton onClick={moveUp}>\n                            <UpIcon/>\n                          </IconButton>\n                        </div>\n                        <div>\n                          <IconButton onClick={moveDown}>\n                            <DownIcon/>\n                          </IconButton>\n                        </div>\n                      </div>\n                    </div>\n                  }\n                />\n              </div>\n            </AnimatedItem>\n          )\n        })}\n      </PoseGroup>\n    </Container>\n  );\n\n  return (\n    <Layout\n      main={main}\n      state={{\n        ids: state.ids,\n        entities: state.entities,\n      }}\n    />\n  )\n}\n","import { makeStyles } from '@material-ui/core/styles';\n\nexport const useStyles = makeStyles(() => ({\n  listTitle: {\n    fontWeight: 'bold',\n  },\n  item: {\n    background: '#fff',\n    borderTop: 'solid 1px #ccc',\n    display: 'flex',\n    justifyContent: 'space-between'\n  }\n}));\n","import React, { useReducer } from 'react';\nimport normalizedSlice, { Cardinalities, Id, Schema } from 'normalized-reducer';\nimport Typography from '@material-ui/core/Typography';\n\nimport Container from '@material-ui/core/Container';\nimport IconButton from '@material-ui/core/IconButton';\nimport UpIcon from '@material-ui/icons/ArrowUpward';\nimport DownIcon from '@material-ui/icons/ArrowDownward';\nimport posed, { PoseGroup } from 'react-pose';\n\nimport { Card, CardsContainer } from '../../components/card';\nimport { useStyles } from './styles';\nimport { Layout } from '../../components/layout';\nimport { Info, Label } from '../../components/info';\n\nexport interface Item {\n  name: string,\n  listId: Id\n}\n\nexport interface List {\n  title: string,\n  itemIds: Id[]\n}\n\nexport interface EntitiesState {\n  entities: {\n    item: Record<Id, Item>,\n    list: Record<Id, List>\n  },\n  ids: {\n    item: Id[],\n    list: Id[],\n  }\n}\n\nconst schema: Schema = {\n  item: {\n    listId: {\n      type: 'list',\n      cardinality: Cardinalities.ONE,\n      reciprocal: 'itemIds',\n    }\n  },\n  list: {\n    itemIds: {\n      type: 'item',\n      cardinality: Cardinalities.MANY,\n      reciprocal: 'listId'\n    }\n  }\n};\n\nconst { selectors, reducer, actionCreators } = normalizedSlice<EntitiesState>(schema);\n\nconst initialState: EntitiesState = {\n  entities: {\n    list: {\n      'l1': { title: 'List 1', itemIds: ['i1', 'i2', 'i3'] },\n      'l2': { title: 'List 2', itemIds: ['i4', 'i5', 'i6'] },\n    },\n    item: {\n      'i1': { name: 'Item 1', listId: 'l1' },\n      'i2': { name: 'Item 2', listId: 'l1' },\n      'i3': { name: 'Item 3', listId: 'l1' },\n      'i4': { name: 'Item 4', listId: 'l2' },\n      'i5': { name: 'Item 5', listId: 'l2' },\n      'i6': { name: 'Item 6', listId: 'l2' },\n    }\n  },\n  ids: {\n    item: ['i1', 'i2', 'i3', 'i4', 'i5', 'i6'],\n    list: ['l1', 'l2']\n  }\n};\n\nconst AnimatedItem = posed.div({\n  flip: {\n    transition: {\n      duration: 525,\n    },\n  },\n});\n\nexport default function MoveAttached() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const listIds = selectors.getIds(state, { type: 'list' });\n\n  const classNames = useStyles();\n\n  const main = (\n    <Container>\n      <Info\n        title=\"Move attached\"\n        summary=\"Change the ordinal position of an attached entity id\"\n        action=\"moveAttached\"\n        docElemId=\"moveAttached\"\n        example=\"actionCreators.moveAttached('list', 'l1', 'itemIds', 2, 5)\"\n      />\n\n      <Label>Demo:</Label>\n      <Typography>Move an item within a list. Inside the list's data in <code>state.entities.list</code>, the item's id will be moved to the new index in <code>itemIds</code>.</Typography>\n\n      <CardsContainer>\n        {listIds.map(listId => {\n          const list = selectors.getEntity<List>(state, { type: 'list', id: listId });\n\n          const moveItemUp = (index: number) => {\n            dispatch(actionCreators.moveAttached('list', listId, 'itemIds', index, index - 1));\n          };\n\n          const moveItemDown = (index: number) => {\n            dispatch(actionCreators.moveAttached('list', listId, 'itemIds', index, index + 1));\n          };\n\n          const body = (\n            <div>\n              <Typography className={classNames.listTitle}>{list?.title}</Typography>\n\n              <PoseGroup>\n                {list?.itemIds.map((itemId, index) => {\n                  const item = selectors.getEntity<Item>(state, { type: 'item', id: itemId });\n\n                  const moveUp = () => moveItemUp(index);\n                  const moveDown = () => moveItemDown(index);\n\n                  return (\n                    <AnimatedItem key={itemId} index={index}>\n                      <ItemViewer\n                        name={item?.name}\n                        moveUp={moveUp}\n                        moveDown={moveDown}\n                      />\n                    </AnimatedItem>\n                  )\n                })}\n              </PoseGroup>\n            </div>\n          );\n\n          return (\n            <Card\n              key={listId}\n              isRightShown={true}\n              body={body}\n            />\n          )\n        })}\n      </CardsContainer>\n    </Container>\n  );\n\n  return (\n    <Layout\n      main={main}\n      state={state}\n    />\n  )\n}\n\ninterface ItemProps {\n  name?: string,\n  moveUp: () => void,\n  moveDown: () => void,\n}\n\nfunction ItemViewer({ name, moveUp, moveDown }: ItemProps) {\n  const classNames = useStyles();\n\n  return (\n    <div className={classNames.item}>\n      <Typography>{name}</Typography>\n      <div>\n        <div>\n          <IconButton onClick={moveUp}>\n            <UpIcon/>\n          </IconButton>\n        </div>\n        <div>\n          <IconButton onClick={moveDown}>\n            <DownIcon/>\n          </IconButton>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { makeStyles } from '@material-ui/core/styles';\n\nexport const useStyles = makeStyles((theme) => ({\n  card: {\n    marginTop: theme.spacing(2)\n  },\n  buttons: {\n    display: 'flex',\n    justifyContent: 'space-between'\n  }\n}));\n","import React, { useReducer } from 'react';\nimport Container from '@material-ui/core/Container';\nimport Button from '@material-ui/core/Button';\nimport normalizedSlice, { Schema, Id } from 'normalized-reducer';\nimport posed, { PoseGroup } from 'react-pose';\n\nimport { Layout } from '../../components/layout';\nimport { Card, CardsContainer } from '../../components/card';\nimport { useStyles } from './styles';\nimport { Info, Label } from '../../components/info';\nimport Typography from '@material-ui/core/Typography';\n\ninterface Item {\n  name: string\n}\n\nconst schema: Schema = {\n  'item': {\n    // the minimum entity schema is an empty object\n  }\n};\n\ninterface State {\n  entities: {\n    item: Record<Id, Item>\n  },\n  ids: {\n    item: Id[]\n  }\n}\n\nconst {\n  reducer,\n  actionCreators,\n  selectors\n} = normalizedSlice<State>(schema);\n\nconst initialState = {\n  entities: {\n    item: {\n      'i1': { name: 'Foo' },\n      'i2': { name: 'Bar' },\n      'i3': { name: 'Baz' }\n    }\n  },\n  ids: {\n    item: ['i1', 'i2', 'i3']\n  }\n};\n\nconst AnimatedItem = posed.div({\n  flip: {\n    transition: {\n      duration: 525,\n    },\n  },\n});\n\nexport default function Example() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const ids = selectors.getIds(state, { type: 'item' });\n\n  const sortAsc = () => {\n    dispatch(actionCreators.sort<Item>('item', (a, b) => (a.name > b.name ? 1 : -1)));\n  };\n\n  const sortDesc = () => {\n    dispatch(actionCreators.sort<Item>('item', (a, b) => (a.name < b.name ? 1 : -1)));\n  };\n\n  const classNames = useStyles();\n\n  const main = (\n    <Container>\n      <Info\n        title=\"Sort\"\n        summary=\"Sort an entity collection\"\n        action=\"sort\"\n        docElemId=\"sort\"\n        example=\"actionCreators.sort('item', (a, b) => (a.name > b.name ? 1 : -1))\"\n      />\n\n      <Label>Demo:</Label>\n      <Typography>Click the buttons to sort by name. The ids will be sorted inside the <code>state.ids.item</code> array.</Typography>\n\n      <div className={classNames.buttons}>\n        <Button onClick={sortAsc}>Sort by Name Asc</Button>\n        <Button onClick={sortDesc}>Sort by Name Desc</Button>\n      </div>\n\n      <PoseGroup>\n        {ids.map((id, index) => {\n          const item = selectors.getEntity<Item>(state, { type: 'item', id });\n          return (\n            <AnimatedItem key={id} index={index}>\n              <div className={classNames.card}>\n                <Card body={item?.name} isSelectable={false}/>\n              </div>\n            </AnimatedItem>\n          )\n        })}\n      </PoseGroup>\n    </Container>\n  );\n\n  return (\n    <Layout\n      main={main}\n      state={state}\n    />\n  )\n}\n","import { makeStyles } from '@material-ui/core/styles';\n\nexport const useStyles = makeStyles((theme) => ({\n  buttons: {\n    display: 'flex',\n    justifyContent: 'space-between'\n  },\n  listTitle: {\n    fontWeight: 'bold',\n  },\n  item: {\n    marginTop: theme.spacing(2),\n    background: '#fff',\n    borderTop: 'solid 1px #ccc',\n    display: 'flex',\n  }\n}));\n","import React, { useReducer } from 'react';\nimport normalizedSlice, { Cardinalities, Id, Schema } from 'normalized-reducer';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\n\nimport Container from '@material-ui/core/Container';\nimport posed, { PoseGroup } from 'react-pose';\n\nimport { Card, CardsContainer } from '../../components/card';\nimport { useStyles } from './styles';\nimport { Layout } from '../../components/layout';\nimport { Info, Label } from '../../components/info';\n\nexport interface Item {\n  name: string,\n  listId: Id\n}\n\nexport interface List {\n  title: string,\n  itemIds: Id[]\n}\n\nexport interface EntitiesState {\n  entities: {\n    item: Record<Id, Item>,\n    list: Record<Id, List>\n  },\n  ids: {\n    item: Id[],\n    list: Id[],\n  }\n}\n\nconst schema: Schema = {\n  item: {\n    listId: {\n      type: 'list',\n      cardinality: Cardinalities.ONE,\n      reciprocal: 'itemIds',\n    }\n  },\n  list: {\n    itemIds: {\n      type: 'item',\n      cardinality: Cardinalities.MANY,\n      reciprocal: 'listId'\n    }\n  }\n};\n\nconst { selectors, reducer, actionCreators } = normalizedSlice<EntitiesState>(schema);\n\nconst initialState: EntitiesState = {\n  entities: {\n    list: {\n      'l1': { title: 'List 1', itemIds: ['i2', 'i3', 'i1'] },\n      'l2': { title: 'List 2', itemIds: ['i4', 'i6', 'i5'] },\n    },\n    item: {\n      'i1': { name: 'Item 1', listId: 'l1' },\n      'i2': { name: 'Item 2', listId: 'l1' },\n      'i3': { name: 'Item 3', listId: 'l1' },\n      'i4': { name: 'Item 4', listId: 'l2' },\n      'i5': { name: 'Item 5', listId: 'l2' },\n      'i6': { name: 'Item 6', listId: 'l2' },\n    }\n  },\n  ids: {\n    item: ['i1', 'i2', 'i3', 'i4', 'i5', 'i6'],\n    list: ['l1', 'l2']\n  }\n};\n\nconst AnimatedItem = posed.div({\n  flip: {\n    transition: {\n      duration: 525,\n    },\n  },\n});\n\nexport default function MoveAttached() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const listIds = selectors.getIds(state, { type: 'list' });\n\n  const sortListItemsAsc = (listId: Id) => {\n    dispatch(actionCreators.sortAttached<Item>('list', listId, 'itemIds', (a, b) => (a.name > b.name ? 1 : -1)));\n  };\n\n  const sortListItemsDesc = (listId: Id) => {\n    dispatch(actionCreators.sortAttached<Item>('list', listId, 'itemIds', (a, b) => (a.name < b.name ? 1 : -1)));\n  };\n\n\n  const classNames = useStyles();\n\n  const main = (\n    <Container>\n      <Info\n        title=\"Sort attached\"\n        summary=\"Sort an attached entity collection\"\n        action=\"sortAttached\"\n        docElemId=\"sortAttached\"\n        example=\"actionCreators.sortAttached('list', 'l1', 'itemIds', (a, b) => (a.name > b.name ? 1 : -1))\"\n      />\n\n      <Label>Demo:</Label>\n      <Typography>Click the buttons to sort a list's items by name. The ids will be sorted inside the <code>itemIds</code> array of the list inside <code>state.entities.list</code>.</Typography>\n\n      <CardsContainer>\n        {listIds.map(listId => {\n          const list = selectors.getEntity<List>(state, { type: 'list', id: listId });\n\n          const sortAsc = () => sortListItemsAsc(listId);\n          const sortDesc = () => sortListItemsDesc(listId);\n\n          const body = (\n            <div>\n              <Typography className={classNames.listTitle}>{list?.title}</Typography>\n\n              <div className={classNames.buttons}>\n                <Button onClick={sortAsc}>Sort by Name Asc</Button>\n                <Button onClick={sortDesc}>Sort by Name Desc</Button>\n              </div>\n\n              <PoseGroup>\n                {list?.itemIds.map((itemId, index) => {\n                  const item = selectors.getEntity<Item>(state, { type: 'item', id: itemId });\n\n                  return (\n                    <AnimatedItem key={itemId} index={index}>\n                      <div className={classNames.item}>\n                        <Typography>{item?.name}</Typography>\n                      </div>\n                    </AnimatedItem>\n                  )\n                })}\n              </PoseGroup>\n            </div>\n          );\n\n          return (\n            <Card\n              key={listId}\n              isRightShown={true}\n              body={body}\n            />\n          )\n        })}\n      </CardsContainer>\n    </Container>\n  );\n\n  return (\n    <Layout\n      main={main}\n      state={state}\n    />\n  )\n}\n","import { makeStyles } from '@material-ui/core/styles';\n\nexport const useStyles = makeStyles((theme) => ({\n  buttons: {\n    display: 'flex',\n    justifyContent: 'space-between'\n  },\n  listTitle: {\n    fontWeight: 'bold',\n  },\n  item: {\n    marginTop: theme.spacing(2),\n    background: '#fff',\n    borderTop: 'solid 1px #ccc',\n    display: 'flex',\n  }\n}));\n","import React, { useReducer, useState } from 'react';\nimport normalizedSlice, { Cardinalities, Id, Schema } from 'normalized-reducer';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\n\nimport Container from '@material-ui/core/Container';\n\nimport { Card, CardsContainer } from '../../components/card';\nimport { useStyles } from './styles';\nimport { Layout } from '../../components/layout';\nimport { randomString } from '../../util';\nimport { Info, Label } from '../../components/info';\n\nexport interface Item {\n  name: string,\n  listId: Id\n}\n\nexport interface List {\n  title: string,\n  itemIds: Id[]\n}\n\nexport interface EntitiesState {\n  entities: {\n    item: Record<Id, Item>,\n    list: Record<Id, List>\n  },\n  ids: {\n    item: Id[],\n    list: Id[],\n  }\n}\n\nconst schema: Schema = {\n  item: {\n    listId: {\n      type: 'list',\n      cardinality: Cardinalities.ONE,\n      reciprocal: 'itemIds',\n    }\n  },\n  list: {\n    itemIds: {\n      type: 'item',\n      cardinality: Cardinalities.MANY,\n      reciprocal: 'listId'\n    }\n  }\n};\n\nconst { selectors, emptyState, reducer, actionCreators } = normalizedSlice<EntitiesState>(schema);\n\nexport default function Example() {\n  const [state, dispatch] = useReducer(reducer, emptyState);\n\n  const [listNumber, setListNumber] = useState(1);\n\n  const listIds = selectors.getIds(state, { type: 'list' });\n\n  const addListWithItems = () => {\n    const [\n      listId,\n      itemId1,\n      itemId2,\n      itemId3\n    ] = [randomString(), randomString(), randomString(), randomString()];\n\n    dispatch(actionCreators.batch(\n      actionCreators.create('list', listId, { title: `List ${listNumber}` }),\n      actionCreators.create('item', itemId1, { name: `Item ${listNumber}.1` }),\n      actionCreators.create('item', itemId2, { name: `Item ${listNumber}.2` }),\n      actionCreators.create('item', itemId3, { name: `Item ${listNumber}.3` }),\n      actionCreators.attach('list', listId, 'itemIds', itemId1),\n      actionCreators.attach('list', listId, 'itemIds', itemId2),\n      actionCreators.attach('list', listId, 'itemIds', itemId3),\n    ));\n\n    setListNumber(listNumber + 1);\n  };\n\n  const classNames = useStyles();\n\n  const main = (\n    <Container>\n      <Info\n        title=\"Batch\"\n        summary=\"Run a batch of actions in a single reduction\"\n        action=\"batch\"\n        docElemId=\"batch\"\n        example={[\n          \"actionCreators.batch(\",\n          \"  actionCreators.create('list', 'l1'),\",\n          \"  actionCreators.create('item', 'i1'),\",\n          \"  actionCreators.attach('list', 'l1', 'itemIds', 'i1'),\",\n          \")\",\n        ]}\n      />\n\n      <Label>Demo:</Label>\n      <Typography>Click the button to dispatch an action that contains multiple actions. Each one will create a list, three items, and then attach the items to the list.</Typography>\n\n      <Button onClick={addListWithItems}>Create List with Items</Button>\n\n      <CardsContainer>\n        {listIds.map(listId => {\n          const list = selectors.getEntity<List>(state, { type: 'list', id: listId });\n\n          const body = (\n            <div>\n              <Typography className={classNames.listTitle}>{list?.title}</Typography>\n\n              <div>\n                {list?.itemIds.map((itemId) => {\n                  const item = selectors.getEntity<Item>(state, { type: 'item', id: itemId });\n\n                  return (\n                    <div key={itemId} className={classNames.item}>\n                      <Typography>{item?.name}</Typography>\n                    </div>\n                  )\n                })}\n              </div>\n            </div>\n          );\n\n          return (\n            <Card\n              key={listId}\n              isRightShown={true}\n              body={body}\n            />\n          )\n        })}\n      </CardsContainer>\n    </Container>\n  );\n\n  return (\n    <Layout\n      main={main}\n      state={state}\n    />\n  )\n}\n","import { makeStyles } from '@material-ui/core/styles';\n\nexport const useStyles = makeStyles(theme => ({\n  buttons: {\n    marginTop: theme.spacing(2),\n    display: 'flex',\n    justifyContent: 'space-between'\n  }\n}));\n","import React, { useReducer } from 'react';\nimport normalizedSlice, { Cardinalities, Id, Schema, State } from 'normalized-reducer';\nimport Button from '@material-ui/core/Button';\nimport Container from '@material-ui/core/Container';\n\nimport { Layout } from '../../components/layout';\nimport { useStyles } from './styles';\nimport { Info, Label } from '../../components/info';\nimport Typography from '@material-ui/core/Typography';\n\nexport interface Item {\n  name: string,\n  listId: Id\n}\n\nexport interface List {\n  title: string,\n  itemIds: Id[]\n}\n\nexport interface EntitiesState extends State {\n  entities: {\n    item: Record<Id, Item>,\n    list: Record<Id, List>\n  },\n  ids: {\n    item: Id[],\n    list: Id[],\n  }\n}\n\nconst schema: Schema = {\n  item: {\n    listId: {\n      type: 'list',\n      cardinality: Cardinalities.ONE,\n      reciprocal: 'itemIds',\n    }\n  },\n  list: {\n    itemIds: {\n      type: 'item',\n      cardinality: Cardinalities.MANY,\n      reciprocal: 'listId'\n    }\n  }\n};\n\nconst { reducer, emptyState, actionCreators } = normalizedSlice<EntitiesState>(schema);\n\nconst initialState: EntitiesState = {\n  entities: {\n    list: {\n      'l1': { title: 'List 1', itemIds: ['i1', 'i2', 'i3'] },\n      'l2': { title: 'List 2', itemIds: ['i4', 'i5'] },\n    },\n    item: {\n      'i1': { name: 'Item 1', listId: 'l1' },\n      'i2': { name: 'Item 2', listId: 'l1' },\n      'i3': { name: 'Item 3', listId: 'l1' },\n      'i4': { name: 'Item 4', listId: 'l2' },\n      'i5': { name: 'Item 5', listId: 'l2' },\n    }\n  },\n  ids: {\n    item: ['i1', 'i2', 'i3', 'i4', 'i5'],\n    list: ['l1', 'l2']\n  }\n};\n\n\nexport default function MoveAttached() {\n  const [state, dispatch] = useReducer(reducer, emptyState);\n\n  const setState = () => dispatch(actionCreators.setState(initialState));\n  const clearState = () => dispatch(actionCreators.setState(emptyState));\n\n  const classNames = useStyles();\n\n  const main = (\n    <Container>\n      <Info\n        title=\"Set state\"\n        summary=\"Set the normalized state\"\n        action=\"setState\"\n        docElemId=\"setState\"\n        example=\"actionCreators.setState(myInitialState)\"\n      />\n\n      <Label>Demo:</Label>\n      <Typography>Click the buttons to set/clear an entire object in the state.</Typography>\n\n      <div className={classNames.buttons}>\n        <Button onClick={setState}>Set State</Button>\n        <Button onClick={clearState}>Clear State</Button>\n      </div>\n\n      <div>\n        <pre>{JSON.stringify(initialState, null, 2)}</pre>\n      </div>\n    </Container>\n  );\n\n  return (\n    <Layout\n      main={main}\n      state={state}\n    />\n  )\n}\n","import { makeStyles } from '@material-ui/core/styles';\n\nexport const useStyles = makeStyles(theme => ({\n  sourceLink: {\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n  },\n  chip: {\n    marginBottom: theme.spacing(1),\n    marginLeft: theme.spacing(1),\n    cursor: 'grab'\n  },\n  demo: {\n    marginTop: theme.spacing(2),\n  }\n}));\n","import React, { ReactNode, useReducer } from 'react';\nimport Chip, { ChipProps } from '@material-ui/core/Chip';\nimport Typography from '@material-ui/core/Typography';\nimport { SortableContainer, SortableElement, SortableHandle } from 'react-sortable-hoc';\nimport makeNormalizedSlice from 'normalized-reducer';\n\nimport { Layout } from '../../components/layout';\nimport { Summary, Code, Label, ExternalLink } from '../../components/info';\nimport { useStyles } from './style';\nimport Container from '@material-ui/core/Container';\n\ninterface Tag {\n  value: string\n}\n\nconst schema = {\n  tag: {}\n};\n\nconst { selectors, actionCreators, reducer } = makeNormalizedSlice(schema);\n\nconst initialState = {\n  entities: {\n    tag: {\n      't1': { value: 'React' },\n      't2': { value: 'normalization' },\n      't4': { value: 'reducer' },\n      't3': { value: 'normalizr' },\n      't5': { value: 'Redux' },\n      't6': { value: 'relational data' }\n    }\n  },\n  ids: {\n    tag: ['t1', 't2', 't3', 't4', 't5', 't6']\n  }\n};\n\n\n\nconst SortableList = SortableContainer(\n  (props: { children: ReactNode }) => {\n    return <div style={{ display: 'flex', flexWrap: 'wrap' }}>{props.children}</div>;\n  }\n);\n\nconst DragHandle = SortableHandle(\n  (props: { children: React.ReactNode }) => {\n    return (\n      <span style={{cursor: 'grab'}} {...props}>\n        {props.children}\n      </span>\n    );\n  }\n);\n\nconst SortableChip = SortableElement((props: ChipProps) => {\n  const classNames = useStyles();\n\n  return (\n    <div><Chip {...props} className={classNames.chip}/></div>\n  )\n});\n\nexport default function Example() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const handleSortStart = () => {\n    document.body.style.cursor = 'grabbing';\n  };\n\n  const handleSortEnd = (indices: { oldIndex: number; newIndex: number }) => {\n    document.body.style.cursor = 'initial';\n    dispatch(actionCreators.move('tag', indices.oldIndex, indices.newIndex));\n  };\n\n  const ids = selectors.getIds(state, { type: 'tag' });\n\n  const classNames = useStyles();\n\n  const main = (\n    <div>\n      <Summary\n        title=\"Sortable Tags\"\n        summary=\"Setting up state for a sortable list is easy.\"\n      />\n\n      <Label>Setup:</Label>\n      <Code>\n{`const schema = {\n  tag: {}\n};\n\nconst { selectors, actionCreators, reducer } = makeNormalizedSlice(schema);`}\n      </Code>\n\n      <Typography className={classNames.sourceLink}>\n        <ExternalLink\n          url=\"https://github.com/brietsparks/normalized-reducer-demo/blob/master/src/example-features/sortable-tags/SortableTags.tsx\"\n          text=\"Source\"\n        />\n      </Typography>\n\n      <Label>Demo:</Label>\n      <Typography>Drag-and-drop the tasks to move (reorder) them, and click the x-icon to delete them.</Typography>\n\n      <div className={classNames.demo}>\n        <SortableList\n          axis=\"xy\"\n          onSortStart={handleSortStart}\n          onSortEnd={handleSortEnd}\n          useDragHandle\n        >\n          {ids.map((id, index) => {\n            const tag = selectors.getEntity<Tag>(state, { type: 'tag', id });\n            const handleDelete = () => dispatch(actionCreators.delete('tag', id));\n            return (\n              <SortableChip\n                key={id}\n                index={index}\n                label={<DragHandle>{tag?.value}</DragHandle>}\n                onDelete={handleDelete}\n              />\n            )\n          })}\n        </SortableList>\n      </div>\n    </div>\n  );\n\n  return (\n    <Layout\n      main={main}\n      state={{\n        ids: state.ids,\n        entities: state.entities,\n      }}\n    />\n  );\n}\n","import { schema } from 'normalizr';\n\nconst userProcessStrategy = (value, parent, key) => {\n  switch (key) {\n    case 'author':\n      return { ...value, posts: [parent.id] };\n    case 'commenter':\n      return { ...value, comments: [parent.id] };\n    default:\n      return { ...value };\n  }\n};\n\nconst userMergeStrategy = (entityA, entityB) => {\n  return {\n    ...entityA,\n    ...entityB,\n    posts: [...(entityA.posts || []), ...(entityB.posts || [])],\n    comments: [...(entityA.comments || []), ...(entityB.comments || [])]\n  };\n};\n\nconst user = new schema.Entity(\n  'users',\n  {},\n  {\n    mergeStrategy: userMergeStrategy,\n    processStrategy: userProcessStrategy\n  }\n);\n\nconst comment = new schema.Entity(\n  'comments',\n  {\n    commenter: user\n  },\n  {\n    processStrategy: (value, parent, key) => {\n      return { ...value, post: parent.id };\n    }\n  }\n);\n\nconst post = new schema.Entity('posts', {\n  author: user,\n  comments: [comment]\n});\n\nexport default [post];\n","import { makeStyles } from '@material-ui/core/styles';\n\nexport const useStyles = makeStyles(theme => ({\n  sourceLink: {\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n  },\n  heading: {\n    maxWidth: 600,\n    marginBottom: theme.spacing(2)\n  },\n  scrollable: {\n    height: '100vh',\n    overflowY: 'scroll'\n  }\n}));\n","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport { normalize } from 'normalizr';\nimport { Cardinalities, fromNormalizr, NormalizrOutput, Schema } from 'normalized-reducer';\n\nimport normalizrSchema from './normalizr-schema';\nimport { useStyles } from './styles';\nimport { StateViewer } from '../../components/state-viewer';\nimport { Links } from '../../nav';\nimport { Summary, Code, ExternalLink } from '../../components/info';\n\n\nconst denormalizedData = [\n  {\n    id: '1',\n    title: 'My first post!',\n    author: {\n      id: '123',\n      name: 'Paul'\n    },\n    comments: [\n      {\n        id: '249',\n        content: 'Nice post!',\n        commenter: {\n          id: '245',\n          name: 'Jane'\n        }\n      },\n      {\n        id: '250',\n        content: 'Thanks!',\n        commenter: {\n          id: '123',\n          name: 'Paul'\n        }\n      }\n    ]\n  },\n  {\n    id: '2',\n    title: 'This other post',\n    author: {\n      id: '123',\n      name: 'Paul'\n    },\n    comments: [\n      {\n        id: '251',\n        content: 'Your other post was nicer',\n        commenter: {\n          id: '245',\n          name: 'Jane'\n        }\n      },\n      {\n        id: '252',\n        content: 'I am a spammer!',\n        commenter: {\n          id: '246',\n          name: 'Spambot5000'\n        }\n      }\n    ]\n  }\n];\n\nconst schema: Schema = {\n  user: {\n    posts: {\n      type: 'post',\n      cardinality: Cardinalities.MANY,\n      reciprocal: 'author'\n    },\n    comments: {\n      type: 'comment',\n      cardinality: Cardinalities.MANY,\n      reciprocal: 'commenter'\n    },\n  },\n  post: {\n    author: {\n      type: 'user',\n      cardinality: Cardinalities.ONE,\n      reciprocal: 'posts'\n    },\n    comments: {\n      type: 'comment',\n      cardinality: Cardinalities.MANY,\n      reciprocal: 'post'\n    }\n  },\n  comment: {\n    post: {\n      type: 'post',\n      cardinality: Cardinalities.ONE,\n      reciprocal: 'comments',\n    },\n    commenter: {\n      type: 'user',\n      cardinality: Cardinalities.ONE,\n      reciprocal: 'comments'\n    }\n  }\n};\n\nexport default function NormalizrIntegration() {\n  const normalizedData: NormalizrOutput = normalize(denormalizedData, normalizrSchema);\n  const initialState = fromNormalizr(normalizedData);\n  const classNames = useStyles();\n\n  return (\n    <Grid container>\n      <Grid item sm={2}>\n        <div className={classNames.scrollable}>\n          <Links/>\n        </div>\n      </Grid>\n\n      <Grid item sm={10}>\n        <div className={classNames.heading}>\n          <Summary title=\"Normalizr Integration\"/>\n\n          <Typography>\n            Normalized-reducer integrates with normalizr via an adapter function\n            that transforms data normalized from normalizr into state that can\n            be fed into the reducer.\n          </Typography>\n        </div>\n\n        <Typography className={classNames.sourceLink}>\n          <ExternalLink\n            url=\"https://github.com/brietsparks/normalized-reducer-demo/blob/master/src/example-features/normalizr-integration/NormalizrIntegration.tsx\"\n            text=\"Source\"\n          />\n        </Typography>\n\n        <Code>\n          {`const denormalizedData = {...}\nconst normalizedData: NormalizrOutput = normalize(denormalizedData, normalizrSchema);\nconst initialState = fromNormalizr(normalizedData);`}\n        </Code>\n\n        <Grid container spacing={0}>\n          <Grid item sm={4}>\n            <div className={classNames.scrollable}>\n              <StateViewer\n                state={denormalizedData}\n                name=\"denormalizedData\"\n              />\n            </div>\n          </Grid>\n          <Grid item sm={4}>\n            <div className={classNames.scrollable}>\n              <StateViewer\n                state={normalizedData}\n                name=\"normalizedData\"\n              />\n            </div>\n          </Grid>\n          <Grid item sm={4}>\n            <div className={classNames.scrollable}>\n              <StateViewer state={initialState}/>\n            </div>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n}\n","import { makeStyles } from '@material-ui/core/styles';\n\nexport const useStyles = makeStyles(theme => ({\n  sourceLink: {\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n  },\n  comment: (args: { isLast?: boolean } = {}) => ({\n    display: 'flex',\n    overflow: 'hidden',\n    marginBottom: args.isLast ? undefined : theme.spacing(2)\n  }),\n  commentSideline: {\n    position: 'relative',\n    top: 11,\n  },\n  commentContent: {\n    paddingLeft: theme.spacing(2),\n    borderTop: 'solid 1px #ccc',\n    borderLeft: 'solid 1px #ccc',\n    width: '100%',\n  },\n  reply: {\n    paddingLeft: theme.spacing(2),\n    borderLeft: 'solid 1px #ccc',\n  },\n  replyCancel: {\n    marginRight: theme.spacing(1)\n  }\n}));\n","import React, { useState } from 'react';\nimport { createStore } from 'redux';\nimport { Provider, useSelector, useDispatch } from 'react-redux';\nimport Typography from '@material-ui/core/Typography';\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\nimport DeleteIcon from '@material-ui/icons/DeleteForever';\nimport ReplyIcon from '@material-ui/icons/ModeComment';\nimport MoreHoriz from '@material-ui/icons/MoreHoriz';\nimport IconButton from '@material-ui/core/IconButton';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport normalizedSlice, { Schema, Cardinalities, Id } from 'normalized-reducer';\n\nimport { Layout } from '../../components/layout';\nimport { Summary, Code, Label, ExternalLink } from '../../components/info';\nimport { useStyles } from './styles';\nimport { randomString } from '../../util';\nimport Container from '@material-ui/core/Container';\n\ninterface Comment {\n  value: string,\n  childIds?: Id[],\n  parentId?: Id\n}\n\nconst schema: Schema = {\n  comment: {\n    parentId: {\n      type: 'comment',\n      cardinality: Cardinalities.ONE,\n      reciprocal: 'childIds'\n    },\n    childIds: {\n      type: 'comment',\n      cardinality: Cardinalities.MANY,\n      reciprocal: 'parentId'\n    }\n  }\n};\n\nexport interface State {\n  entities: {\n    comment: Record<Id, Comment>\n  },\n  ids: {\n    comment: Id[]\n  }\n}\n\nexport const {\n  emptyState,\n  actionCreators,\n  reducer,\n  selectors,\n  actionTypes,\n} = normalizedSlice(schema);\n\nconst initialState: State = {\n  entities: {\n    comment: {\n      'c1': {\n        childIds: ['c1.1'],\n        value: 'Boboddy - what does the first b stand for?',\n      },\n      'c1.1': {\n        parentId: 'c1',\n        value: 'Biznus!'\n      },\n      'c2': {\n        childIds: ['c2.1'],\n        value: 'Maybe there is some sort of animal we can make a sacrifice to - like a giant buffalo.',\n      },\n      'c2.1': {\n        parentId: 'c2', childIds: ['c2.1.1'],\n        value: 'Or some sort of monster like something with the body of a walrus with the head of a sea lion.',\n      },\n      'c2.1.1': {\n        parentId: 'c2.1', childIds: ['c2.1.1.1'],\n        value: 'Or something with the body of an egret with the head of a meerkat.'\n      },\n      'c2.1.1.1': {\n        parentId: 'c2.1.1',\n        value: 'Or just the head of a monkey with the antlers of a reindeer...with the body of a porcupine.'\n      }\n    }\n  },\n  ids: {\n    comment: ['c1', 'c2', 'c1.1', 'c2.1', 'c2.1.1', 'c2.1.1.1']\n  }\n};\n\nconst store = createStore(reducer, initialState);\n\nexport default function Example() {\n  return (\n    <Provider store={store}>\n      <Main/>\n    </Provider>\n  );\n}\n\nconst getRootCommentIds = (state: State) => {\n  const ids = selectors.getIds(state, { type: 'comment' });\n  return ids.filter(id => {\n    const comment = selectors.getEntity<Comment>(state, { type: 'comment', id });\n    return !!comment && !comment.parentId;\n  });\n};\n\nfunction Main() {\n  const ids = useSelector<State, Id[]>(state => getRootCommentIds(state));\n  const state = useSelector(state => state);\n\n  const dispatch = useDispatch();\n  const createRootComment = (value: string) => {\n    const id = randomString();\n    dispatch(actionCreators.create('comment', id, { value }));\n  };\n\n  const classNames = useStyles();\n\n  const main = (\n    <div>\n      <Summary\n        title=\"Comment Tree\"\n        summary=\"An example of a tree structure use-case, where deletion will cascade to all descendants.\"\n      />\n\n      <Label>Setup:</Label>\n      <Code>\n        {`const schema: Schema = {\n  comment: {\n    parentId: {\n      type: 'comment',\n      cardinality: Cardinalities.ONE,\n      reciprocal: 'childIds'\n    },\n    childIds: {\n      type: 'comment',\n      cardinality: Cardinalities.MANY,\n      reciprocal: 'parentId'\n    }\n  }\n};\n\nexport const {\n  emptyState,\n  actionCreators,\n  reducer,\n  selectors,\n} = normalizedSlice(schema);\n`}\n      </Code>\n\n      <Typography className={classNames.sourceLink}>\n        <ExternalLink\n          url=\"https://github.com/brietsparks/normalized-reducer-demo/blob/master/src/example-features/comment-tree/CommentTree.tsx\"\n          text=\"Source\"\n        />\n      </Typography>\n\n      <Label>Demo:</Label>\n\n      <div>\n        <div>\n          {ids.map(id => (\n            <CommentViewer key={id} id={id} />\n          ))}\n        </div>\n        <NewComment\n          onSubmit={createRootComment}\n          label=\"Comment\"\n        />\n      </div>\n    </div>\n  );\n\n  return (\n    <Layout\n      main={main}\n      state={state}\n    />\n  );\n}\n\nconst cascade = () => ({ childIds: cascade });\n\ninterface CommentViewerProps {\n  id: Id,\n  isLast?: boolean\n}\nfunction CommentViewer({ id, isLast }: CommentViewerProps) {\n  const comment = useSelector<State, Comment|undefined>(state => selectors.getEntity(state, { type: 'comment', id }));\n\n  const [isButtonsOpen, setIsButtonsOpen] = useState(false);\n  const openButtons = () => setIsButtonsOpen(true);\n  const closeButtons = () => setIsButtonsOpen(false);\n\n  const [isReplyOpen, setIsReplyOpen] = useState(false);\n  const openReply = () => setIsReplyOpen(true);\n  const closeReply = () => setIsReplyOpen(false);\n\n  const dispatch = useDispatch();\n\n  const classNames = useStyles({ isLast });\n\n  if (!comment) {\n    return null;\n  }\n\n  const cancelReply = () => {\n    closeReply();\n  };\n\n  const submitReply = (value: string) => {\n    if (value) {\n      const childId = randomString();\n      dispatch(actionCreators.batch(\n        actionCreators.create('comment', childId, { value }),\n        actionCreators.attach('comment', childId, 'parentId', id, { reciprocalIndex: 0 })\n      ));\n\n      closeReply();\n      closeButtons();\n    }\n  };\n\n  const deleteComment = () => dispatch(actionCreators.delete('comment', id, cascade));\n\n  return (\n    <div className={classNames.comment}>\n      {comment.childIds &&\n      <div className={classNames.commentSideline} />\n      }\n\n      <div className={classNames.commentContent}>\n        <Typography>{comment.value}</Typography>\n\n        {!isButtonsOpen &&\n        <IconButton onClick={openButtons}>\n          <MoreHoriz fontSize=\"small\" />\n        </IconButton>\n        }\n\n        {isButtonsOpen && !isReplyOpen &&\n        <ClickAwayListener onClickAway={closeButtons}>\n          <div>\n            <IconButton onClick={openReply}>\n              <ReplyIcon fontSize=\"small\" />\n            </IconButton>\n            <IconButton onClick={deleteComment}>\n              <DeleteIcon fontSize=\"small\" />\n            </IconButton>\n          </div>\n        </ClickAwayListener>\n        }\n\n        {isReplyOpen &&\n          <div className={classNames.reply}>\n            <NewComment\n              autoFocus\n              onSubmit={submitReply}\n              onCancel={cancelReply}\n              showCancel={true}\n              label=\"Reply\"\n            />\n          </div>\n        }\n\n        {comment.childIds?.map((childId, index) => (\n          <CommentViewer\n            key={childId}\n            id={childId}\n            isLast={index >= (comment.childIds?.length || 0) - 1}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\ninterface ReplyProps {\n  onSubmit: (value: string) => void,\n  onCancel?: () => void,\n  showCancel?: boolean,\n  label: string,\n  autoFocus?: boolean,\n}\nfunction NewComment({\n  onSubmit,\n  onCancel,\n  showCancel,\n  label,\n  autoFocus\n}: ReplyProps) {\n  const classNames = useStyles();\n\n  const [value, setValue] = useState('');\n\n  const handleClickCancel = () => {\n    if (onCancel) {\n      onCancel();\n    }\n    setValue('');\n  };\n\n  const handleClickSubmit = () => {\n    const cleaned = value.trim();\n    if (cleaned) {\n      onSubmit(cleaned);\n      setValue('');\n    }\n  };\n\n  return (\n    <div>\n      <TextField\n        autoFocus={autoFocus}\n        fullWidth\n        placeholder=\"What are your thoughts?\"\n        onChange={e => setValue(e.target.value)}\n        value={value}\n      />\n\n      <div>\n        {showCancel &&\n        <Button\n          variant=\"text\"\n          className={classNames.replyCancel}\n          onClick={handleClickCancel}\n        >Cancel</Button>\n        }\n        <Button\n          color=\"primary\"\n          onClick={handleClickSubmit}\n        >{label}</Button>\n      </div>\n    </div>\n  );\n}\n\n\n// <div className={classNames.reply}>\n//   <TextField\n//     autoFocus\n//     fullWidth\n//     placeholder=\"What are your thoughts?\"\n//     onChange={e => setReply(e.target.value)}\n//     value={reply}\n//   />\n//\n//   <div>\n//     <Button\n//       variant=\"text\"\n//       className={classNames.replyCancel}\n//       onClick={cancelReply}\n//     >Cancel</Button>\n//     <Button\n//       color=\"primary\"\n//       onClick={submitReply}\n//     >Reply</Button>\n//   </div>\n// </div>\n","import { makeStyles } from '@material-ui/core/styles';\n\nexport const useStyles = makeStyles(theme => ({\n  sourceLink: {\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n  },\n  nodeLine: {\n    display: 'flex',\n  },\n  nodeChildren: {\n    paddingLeft: theme.spacing(3)\n  },\n  options: {\n    display: 'flex',\n  },\n}));\n","import React, { useState } from 'react';\nimport { createStore } from 'redux';\nimport { Provider, useDispatch, useSelector } from 'react-redux';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport FolderClosedIcon from '@material-ui/icons/Folder';\nimport FolderOpenedIcon from '@material-ui/icons/FolderOpen';\nimport FileIcon from '@material-ui/icons/InsertDriveFile';\nimport NewFolderIcon from '@material-ui/icons/CreateNewFolder';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport NewFileIcon from '@material-ui/icons/NoteAdd';\nimport TextField from '@material-ui/core/TextField';\nimport AddIcon from '@material-ui/icons/Add';\nimport DeleteIcon from '@material-ui/icons/DeleteForever';\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\nimport OptionsIcon from '@material-ui/icons/MoreHoriz';\nimport normalizedSlice, { Id, State as BaseState } from 'normalized-reducer';\n\nimport { Layout } from '../../components/layout';\nimport { randomString } from '../../util';\nimport { useStyles } from './styles';\nimport './override.css';\nimport { Code, ExternalLink, Label, Summary } from '../../components/info';\n\nexport interface Directory {\n  id: Id;\n  name: string;\n  parentDirectoryId?: Id,\n  childDirectoryIds?: Id[];\n  fileIds?: Id[];\n}\n\nexport interface File {\n  id: Id,\n  name: string;\n  directoryId: Id\n}\n\nconst schema = {\n  directory: {\n    parentDirectoryId: {\n      type: 'directory', cardinality: 'one', reciprocal: 'childDirectoryIds'\n    },\n    childDirectoryIds: {\n      type: 'directory', cardinality: 'many', reciprocal: 'parentDirectoryId'\n    },\n    fileIds: {\n      type: 'file', cardinality: 'many', reciprocal: 'directoryId'\n    }\n  },\n  file: {\n    directoryId: {\n      type: 'directory', cardinality: 'one', reciprocal: 'fileIds'\n    }\n  }\n};\n\nexport interface State extends BaseState {\n  entities: {\n    directory: Record<Id, Directory>,\n    file: Record<Id, File>,\n  },\n  ids: {\n    directory: Id[],\n    file: Id[],\n  }\n}\n\nexport const {\n  emptyState,\n  actionCreators,\n  reducer,\n  selectors,\n  actionTypes,\n} = normalizedSlice(schema);\n\nconst initialState: State = {\n  entities: {\n    directory: {\n      'd1': {\n        id: 'd1', name: 'Directory 1',\n        childDirectoryIds: ['d1.1'], fileIds: ['f1'],\n      },\n      'd1.1': {\n        id: 'd1.1', name: 'Directory 1.1',\n        parentDirectoryId: 'd1', childDirectoryIds: ['d1.1.1'], fileIds: ['f2', 'f3']\n      },\n      'd1.1.1': {\n        id: 'd1.1', name: 'Directory 1.1.1',\n        parentDirectoryId: 'd1.1', childDirectoryIds: [], fileIds: ['f4']\n      },\n      'g2': {\n        id: 'd1', name: 'Directory 2',\n        childDirectoryIds: [], fileIds: ['f5'],\n      }\n    },\n    file: {\n      'f1': { id: 'f1', name: 'File 1', directoryId: 'd1' },\n      'f2': { id: 'f2', name: 'File 2', directoryId: 'd1.1' },\n      'f3': { id: 'f3', name: 'File 3', directoryId: 'd1.1' },\n      'f4': { id: 'f4', name: 'File 4', directoryId: 'd1.1.1' },\n      'f5': { id: 'f5', name: 'File 5', directoryId: 'g2' },\n    }\n  },\n  ids: {\n    directory: ['d1', 'd1.1', 'd1.1.1', 'g2'],\n    file: ['f1', 'f2', 'f3', 'f4', 'f5']\n  }\n};\n\nconst getTopLevelDirectoryIds = (state: State) => {\n  const ids = selectors.getIds(state, { type: 'directory' });\n  return ids.filter((id: Id) => {\n    const directory = selectors.getEntity<Directory>(state, { type: 'directory', id });\n    return !!directory && !directory.parentDirectoryId;\n  });\n};\n\nconst store = createStore(reducer, initialState);\n\nexport default function Example() {\n  return (\n    <Provider store={store}>\n      <TopLevelDirectoryNodes/>\n    </Provider>\n  );\n}\n\nfunction TopLevelDirectoryNodes() {\n  const topLevelIds = useSelector<State, Id[]>(state => getTopLevelDirectoryIds(state));\n  const state = useSelector(state => state);\n\n  const dispatch = useDispatch();\n  const createTopLevelDirectory = (name: string) => {\n    const id = randomString();\n    dispatch(actionCreators.create('directory', id, { name }));\n  };\n\n  const classNames = useStyles();\n\n  const main = (\n    <div>\n      <Summary\n        title=\"Directory Tree\"\n        summary=\"An a composite-tree structure use-case, where deletion will cascade to all descendants.\"\n      />\n\n      <Label>Setup:</Label>\n      <Code>\n        {`const schema = {\n  directory: {\n    parentDirectoryId: {\n      type: 'directory', cardinality: 'one', reciprocal: 'childDirectoryIds'\n    },\n    childDirectoryIds: {\n      type: 'directory', cardinality: 'many', reciprocal: 'parentDirectoryId'\n    },\n    fileIds: {\n      type: 'file', cardinality: 'many', reciprocal: 'directoryId'\n    }\n  },\n  file: {\n    directoryId: {\n      type: 'directory', cardinality: 'one', reciprocal: 'fileIds'\n    }\n  }\n};\n\nexport const {\n  emptyState,\n  actionCreators,\n  reducer,\n  selectors,\n} = normalizedSlice(schema);\n`}\n      </Code>\n\n      <Typography className={classNames.sourceLink}>\n        <ExternalLink\n          url=\"https://github.com/brietsparks/normalized-reducer-demo/blob/master/src/example-features/directory-tree/DirectoryTree.tsx\"\n          text=\"Source\"\n        />\n      </Typography>\n\n      <Label>Demo:</Label>\n        <div>\n        {topLevelIds.map(id => (\n          <DirectoryNode key={id} id={id}/>\n        ))}\n\n        <Form onSubmit={createTopLevelDirectory} placeholder=\"New Top Level Folder\"/>\n      </div>\n    </div>\n  );\n\n  return (\n    <Layout\n      main={main}\n      state={state}\n    />\n  )\n}\n\nconst cascade = () => ({ childDirectoryIds: cascade, fileIds: {} });\n\ninterface DirectoryCardProps {\n  id: Id,\n}\nfunction DirectoryNode({ id }: DirectoryCardProps) {\n  const directory = useSelector<State, Directory | undefined>(state => selectors.getEntity<Directory>(state, {\n    type: 'directory',\n    id\n  }));\n\n  const [isOpen, setIsOpen] = useState(!directory?.parentDirectoryId);\n  const open = () => setIsOpen(true);\n  const close = () => setIsOpen(false);\n\n  const [isOptionsShown, setIsOptionsShown] = useState(false);\n  const showOptions = () => setIsOptionsShown(true);\n  const hideOptions = () => setIsOptionsShown(false);\n\n  const [isFileFormShown, setIsFileFormShown] = useState(false);\n  const [isDirectoryFormShown, setIsDirectoryFormShown] = useState(false);\n  const showFileForm = () => {\n    setIsFileFormShown(true);\n    setIsDirectoryFormShown(false);\n    setIsOptionsShown(false);\n  };\n  const showDirectoryForm = () => {\n    setIsDirectoryFormShown(true);\n    setIsFileFormShown(false);\n    setIsOptionsShown(false);\n  };\n  const hideFileForm = () => setIsFileFormShown(false);\n  const hideDirectoryForm = () => setIsDirectoryFormShown(false);\n\n  const hideFormAndOptions = () => {\n    hideFileForm();\n    hideDirectoryForm();\n    hideOptions();\n  };\n\n  const dispatch = useDispatch();\n\n  const classNames = useStyles();\n\n  const createChildDirectory = (name: string) => {\n    const childId = randomString();\n    dispatch(actionCreators.batch(\n      actionCreators.create('directory', childId, { name }),\n      actionCreators.attach('directory', childId, 'parentDirectoryId', id)\n    ));\n    hideFormAndOptions();\n  };\n  const createFile = (name: string) => {\n    const fileId = randomString();\n    dispatch(actionCreators.batch(\n      actionCreators.create('file', fileId, { name }),\n      actionCreators.attach('file', fileId, 'directoryId', id)\n    ));\n    hideFormAndOptions();\n  };\n  const deleteDirectory = () => {\n    dispatch(actionCreators.delete('directory', id, cascade))\n  };\n\n  if (!directory) {\n    return null;\n  }\n\n  return (\n    <div>\n      <div className={classNames.nodeLine}>\n        {!isOpen &&\n        <IconButton onClick={open}><FolderClosedIcon/></IconButton>\n        }\n\n        {isOpen &&\n        <IconButton onClick={close}><FolderOpenedIcon/></IconButton>\n        }\n\n        <Typography>{directory.name}</Typography>\n      </div>\n\n      {isOpen &&\n      <div className={classNames.nodeChildren}>\n        <div className={classNames.options}>\n          <span>\n            <IconButton onClick={showOptions}><OptionsIcon/></IconButton>\n          </span>\n\n          {(isOptionsShown || isDirectoryFormShown || isFileFormShown) &&\n          <ClickAwayListener onClickAway={hideFormAndOptions}>\n            <div>\n              {isOptionsShown &&\n              <span>\n                <IconButton onClick={showDirectoryForm}><NewFolderIcon/></IconButton>\n                <IconButton onClick={showFileForm}><NewFileIcon/></IconButton>\n                <IconButton onClick={deleteDirectory}><DeleteIcon/></IconButton>\n              </span>\n              }\n\n              {isDirectoryFormShown &&\n              <Form onSubmit={createChildDirectory} placeholder=\"New Folder:\" autoFocus={true}/>\n              }\n\n              {isFileFormShown &&\n              <Form onSubmit={createFile} placeholder=\"New File:\" autoFocus={true}/>\n              }\n            </div>\n          </ClickAwayListener>\n          }\n        </div>\n\n        <div>\n          {directory.fileIds?.map(fileId => (\n            <FileNode key={fileId} id={fileId}/>\n          ))}\n        </div>\n        <div>\n          {directory.childDirectoryIds?.map(childDirectoryId => (\n            <DirectoryNode key={childDirectoryId} id={childDirectoryId}/>\n          ))}\n        </div>\n      </div>\n      }\n    </div>\n  );\n}\n\ninterface FileNodeProps {\n  id: Id\n}\n\nfunction FileNode({ id }: FileNodeProps) {\n  const file = useSelector<State, File | undefined>(state => selectors.getEntity<File>(state, { type: 'file', id }));\n\n  const classNames = useStyles();\n\n  if (!file) {\n    return null;\n  }\n\n  return (\n    <div className={`${classNames.nodeLine} directory-file`}>\n      <FileIcon/>\n      <Typography>{file.name}</Typography>\n    </div>\n  );\n}\n\ninterface FormProps {\n  onSubmit: (name: string) => void,\n  placeholder: string,\n  autoFocus?: boolean,\n}\n\nfunction Form({ onSubmit, placeholder, autoFocus }: FormProps) {\n  const [name, setName] = useState('');\n  const cleanName = name.trim();\n\n  const handleClickSubmit = () => {\n    if (cleanName) {\n      onSubmit(cleanName);\n      setName('');\n    }\n  };\n\n  return (\n    <div>\n      <TextField\n        autoFocus={autoFocus}\n        value={name}\n        onChange={e => setName(e.target.value)}\n        placeholder={placeholder}\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">\n              <IconButton onClick={handleClickSubmit} color=\"primary\" disabled={!cleanName}>\n                <AddIcon/>\n              </IconButton>\n            </InputAdornment>\n          )\n        }}\n      />\n    </div>\n  );\n}\n","\nexport default  {\n  create: '/demo/create',\n  createIndexed: '/demo/create-indexed',\n  update: '/demo/update',\n  move: '/demo/move',\n  deleteBasic: '/demo/delete-basic',\n  oneToMany: '/demo/attach-detach-one-to-many',\n  manyToMany: '/demo/attach-detach-many-to-many',\n  oneToOne: '/demo/attach-detach-one-to-one',\n  moveAttached: '/demo/move-attached',\n  deleteAndDetach: '/demo/delete-and-detach',\n  sort: '/demo/sort',\n  sortAttached: '/demo/sort-attached',\n  batch: '/demo/batch',\n  setState: '/demo/set-state',\n\n  sortableTags: '/examples/sortable-tags',\n  commentTree: '/examples/comment-tree',\n  directoryTree: '/examples/directory-tree',\n  normalizrIntegration: '/examples/normalizr-integration',\n};\n","import React from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\n\nimport Create from '../demo-actions/create';\nimport AttachDetach from '../demo-actions/attach-detach';\nimport { Update } from '../demo-actions/update';\nimport Delete from '../demo-actions/delete';\nimport { Move } from '../demo-actions/move';\nimport { MoveAttached } from '../demo-actions/move-attached';\nimport { Sort } from '../demo-actions/sort';\nimport { SortAttached } from '../demo-actions/sort-attached';\nimport { BatchActions } from '../demo-actions/batch-actions';\nimport { SetState } from '../demo-actions/set-state';\n\nimport { SortableTags } from '../example-features/sortable-tags';\nimport { NormalizrIntegration } from '../example-features/normalizr-integration';\nimport { CommentTree } from '../example-features/comment-tree';\nimport { DirectoryTree } from '../example-features/directory-tree';\n\nimport routes from './routes';\n\nexport default function Router() {\n  return (\n    <BrowserRouter basename=\"normalized-reducer\">\n      <Route exact path=\"/\"><Create.Basic/></Route>\n      <Route exact path={routes.create}><Create.Basic/></Route>\n      <Route exact path={routes.createIndexed}><Create.WithIndex/></Route>\n      <Route exact path={routes.update}><Update/></Route>\n      <Route exact path={routes.move}><Move/></Route>\n      <Route exact path={routes.deleteBasic}><Delete.Basic/></Route>\n      <Route exact path={routes.oneToMany}><AttachDetach.OneToMany/></Route>\n      <Route exact path={routes.manyToMany}><AttachDetach.ManyToMany/></Route>\n      <Route exact path={routes.oneToOne}><AttachDetach.OneToOne/></Route>\n      <Route exact path={routes.moveAttached}><MoveAttached/></Route>\n      <Route exact path={routes.deleteAndDetach}><Delete.WithAttachments/></Route>\n      <Route exact path={routes.sort}><Sort/></Route>\n      <Route exact path={routes.sortAttached}><SortAttached/></Route>\n      <Route exact path={routes.batch}><BatchActions/></Route>\n      <Route exact path={routes.setState}><SetState/></Route>\n\n      <Route exact path={routes.sortableTags}><SortableTags/></Route>\n      <Route exact path={routes.commentTree}><CommentTree/></Route>\n      <Route exact path={routes.directoryTree}><DirectoryTree/></Route>\n      <Route exact path={routes.normalizrIntegration}><NormalizrIntegration/></Route>\n    </BrowserRouter>\n  );\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport Divider from '@material-ui/core/Divider';\nimport GithubIcon from '@material-ui/icons/GitHub';\n\nimport routes from './routes';\nimport './overrides.css';\n\nexport default function Links() {\n  return (\n    <List dense component=\"nav\" className=\"nav-links\">\n      <ListItem>\n        <ListItemText>\n          <a href=\"https://github.com/brietsparks/normalized-reducer\" target=\"_blank\" rel=\"noopener noreferrer\">\n            <GithubIcon/> Normalized Reducer\n          </a>\n        </ListItemText>\n      </ListItem>\n\n      <Divider/>\n\n      <List\n        dense\n        component=\"div\"\n        subheader={\n          <ListSubheader component=\"div\">Actions Demo</ListSubheader>\n        }\n      >\n        <Link to={routes.create}>\n          <ListItem button>\n            <ListItemText>Create</ListItemText>\n          </ListItem>\n        </Link>\n        <Link to={routes.createIndexed}>\n          <ListItem button>\n            <ListItemText>Create, indexed</ListItemText>\n          </ListItem>\n        </Link>\n        <Link to={routes.update}>\n          <ListItem button>\n            <ListItemText>Update</ListItemText>\n          </ListItem>\n        </Link>\n        <Link to={routes.move}>\n          <ListItem button>\n            <ListItemText>Move</ListItemText>\n          </ListItem>\n        </Link>\n        <Link to={routes.deleteBasic}>\n          <ListItem button>\n            <ListItemText>Delete</ListItemText>\n          </ListItem>\n        </Link>\n        <Link to={routes.oneToMany}>\n          <ListItem button>\n            <ListItemText>Attach/detach, one-to-many</ListItemText>\n          </ListItem>\n        </Link>\n        <Link to={routes.manyToMany}>\n          <ListItem button>\n            <ListItemText>Attach/detach, many-to-many</ListItemText>\n          </ListItem>\n        </Link>\n        <Link to={routes.oneToOne}>\n          <ListItem button>\n            <ListItemText>Attach/detach, one-to-one</ListItemText>\n          </ListItem>\n        </Link>\n        <Link to={routes.moveAttached}>\n          <ListItem button>\n            <ListItemText>Move attached</ListItemText>\n          </ListItem>\n        </Link>\n        <Link to={routes.deleteAndDetach}>\n          <ListItem button>\n            <ListItemText>Delete + detach</ListItemText>\n          </ListItem>\n        </Link>\n        <Link to={routes.sort}>\n          <ListItem button>\n            <ListItemText>Sort</ListItemText>\n          </ListItem>\n        </Link>\n        <Link to={routes.sortAttached}>\n          <ListItem button>\n            <ListItemText>Sort attached</ListItemText>\n          </ListItem>\n        </Link>\n        <Link to={routes.batch}>\n          <ListItem button>\n            <ListItemText>Batch</ListItemText>\n          </ListItem>\n        </Link>\n        <Link to={routes.setState}>\n          <ListItem button>\n            <ListItemText>Set state</ListItemText>\n          </ListItem>\n        </Link>\n        <Divider/>\n      </List>\n\n      <List\n        dense\n        component=\"div\"\n        subheader={\n          <ListSubheader\n            component=\"div\">Example Uses\n          </ListSubheader>\n        }\n      >\n\n        <Link to={routes.sortableTags}>\n          <ListItem button>\n            <ListItemText>Sortable tags list</ListItemText>\n          </ListItem>\n        </Link>\n\n        <Link to={routes.commentTree}>\n          <ListItem button>\n            <ListItemText>Comment tree</ListItemText>\n          </ListItem>\n        </Link>\n\n\n        <Link to={routes.directoryTree}>\n          <ListItem button>\n            <ListItemText>Directory tree (composite tree)</ListItemText>\n          </ListItem>\n        </Link>\n\n        <Link to={routes.normalizrIntegration}>\n          <ListItem button>\n            <ListItemText>Normalizr Integration</ListItemText>\n          </ListItem>\n        </Link>\n      </List>\n    </List>\n  );\n}\n","import React from 'react';\nimport { MuiThemeProvider } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport theme from './theme';\nimport { Router } from './nav';\n\nconst App: React.FC = () => {\n  return (\n    <MuiThemeProvider theme={theme}>\n      <CssBaseline/>\n      <Router/>\n    </MuiThemeProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}